/*
** Copyright (C) 2011, 2015  International Business Machines Corporation
** All Rights Reserved
*/

namespace sample;

use com.ibm.streamsx.network.source::*;

composite TestPacketFileSourceBasic2 {

	param		
	expression<rstring> $pcapFilename: getSubmissionTimeValue("pcapFilename", "../../SampleNetworkToolkitData/sample_dns+dhcp.pcap" );
	
	type 
	
	PacketType =
		float64 captureTime,		// time that packet was captured, in seconds since Unix epoch 
		uint32 sessionKey,			// hash of source and destination address and port numbers
		uint64 packetNumber,		// sequence number of packet, as emitted by operator
		uint32 packetLength,		// original length of packet (not necessarily all captured)
		blob packetData;			// contents of packet captured, including network headers (not necessarily complete)

	StatisticsType = 
		float64 statisticsTime,		// time that statistics were produced, in seconds since Unix epoch 
		uint64 packetsProduced,		// number of packets emitted by operator in this interval
		uint64 octetsProduced;		// number of bytes emitted by operator in this interval

	graph

	( stream<PacketType> PacketStream as OutPackets ;
	  stream<StatisticsType> StatisticsStream as OutStatistics ) = PacketFileSource() {
		param
			pcapFilename: $pcapFilename;
		    statisticsInterval: 1.0;
		output 
		OutPackets:
			captureTime = captureTime(),
			sessionKey = sessionKey(),
			packetNumber = packetNumber(),
			packetLength = packetLength(),
			packetData = packetData(); 
		OutStatistics:
			statisticsTime = statisticsTime(),
			packetsProduced = packetsProduced(),
			octetsProduced = octetsProduced();
	}
	() as PacketSink = FileSink(PacketStream) { param file: "debug.TestPacketFileSourceBasic2.PacketStream.out"; format: txt; hasDelayField: true; flush: 1u; }	
	() as StatisticsSink = FileSink(StatisticsStream) { param file: "debug.TestPacketFileSourceBasic2.StatisticsStream.out"; format: txt; hasDelayField: true; flush: 1u; }	

}

