/*
** Copyright (C) 2011, 2015  International Business Machines Corporation
** All Rights Reserved
*/

namespace sample;

use com.ibm.streamsx.network.source::*;

composite TestPacketFileSourceInputStream {

	param		
	expression<rstring> $pcapDirectory: getSubmissionTimeValue("pcapDirectory", "data" );
    expression<float64> $timeoutInterval: (float64)getSubmissionTimeValue("timeoutInterval", "1.0" );
	
	type 
	
	PacketType =
	  rstring filepath,         // implicitly copied from input tuple
	  rstring filename,    		// explicitly extracted from input tuple's 'filepath' attribute
	  float64 captureTime,		// time that packet was captured, in seconds since Unix epoch 
	  uint64 packetNumber,		// sequence number of packet, as emitted by operator
	  uint32 packetLength,		// original length of packet (not necessarily all captured)
	  blob packetData;			// contents of packet captured, including network headers (not necessarily complete)

	graph

	stream<rstring filepath> FilepathStream as Out = DirectoryScan() {
	  param
	      directory: $pcapDirectory; 
	      pattern: "\\.pcap$"; 
	output Out:
	      filepath = FullPath(); }

	stream<PacketType> PacketStream as Out = PacketFileSource(FilepathStream) {
		output Out:
		    filename = regexMatchPerl(filepath, "([^/]+)$")[0],
			captureTime = captureTime(),
			packetNumber = packetsProcessed() - 1ul,
			packetLength = packetLength(),
			packetData = packetData(); 
	}
	() as PacketSink = FileSink(PacketStream) { param file: "debug.TestPacketFileSourceInputStream.PacketStream.out"; format: txt; hasDelayField: true; flush: 1u; }	

	() as Timeout = Custom() { logic onProcess: { block($timeoutInterval); shutdownPE(); } }
} 

