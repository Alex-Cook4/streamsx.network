/*
** Copyright (C) 2011, 2015  International Business Machines Corporation
** All Rights Reserved
*/

namespace sample;

use com.ibm.streamsx.network.ipv4::*;
use com.ibm.streamsx.network.source::*;
use com.ibm.streamsx.network.parse::*;

composite TestDNSMessageParserTunneling {

    param       
    expression<rstring> $pcapFilename: getSubmissionTimeValue("pcapFilename", "../../SampleNetworkToolkitData/sample_dns_only_txt_base64.pcap" );
    
    type 
    
    PacketType =
        float64 captureTime,            // time that packet was captured, in seconds since Unix epoch 
        uint64  packetNumber,			// tuple sequence number
        rstring ipSourceAddress,        // IP source address
        rstring ipDestinationAddress,   // IP destination address
        blob dnsMessage;                // contents of packet payload, following all network headers

    DNSMessageType = 
        float64 captureTime,            // time that packet was captured, in seconds since Unix epoch 
        uint64  packetNumber,			// tuple sequence number
        rstring ipSourceAddress,        // IP source address
        rstring ipDestinationAddress,   // IP destination address
        rstring questionName,
        list<rstring> answerNames,
        list<rstring> answerData;

    graph

    stream<PacketType> PacketStream as Out = PacketFileSource() {
        param
            pcapFilename: $pcapFilename;
            inputFilter: "udp port 53";
            metricsInterval: 0.0;
        output Out:
            captureTime = captureTime(),
            packetNumber = packetsProcessed(),
            ipSourceAddress = convertIPV4AddressNumericToString(IPV4_SRC_ADDRESS()),
            ipDestinationAddress = convertIPV4AddressNumericToString(IPV4_DST_ADDRESS()),
            dnsMessage = payloadData();
    }
    () as PacketSink = FileSink(PacketStream) { param file: "debug.TestDNSMessageParserTunneling.PacketStream.out"; format: txt; hasDelayField: true; flush: 1u; }  

    stream<DNSMessageType> DNSMessageStream as Out = DNSMessageParser(PacketStream) {
      param
          payloadAttribute: dnsMessage;
	      outputFilters: DNS_QUESTION_TYPE()==16uh && 
	                     DNS_RESPONSE_FLAG() && 
	                     DNS_RESPONSE_CODE()==0ub && 
	                     !isSPFAnswer(DNS_ANSWER_DATA()) &&
	                     !isGoogleSiteVerificationAnswer(DNS_ANSWER_DATA()) &&
	                     isBase64EncodedAnswer(DNS_ANSWER_DATA()) && 
	                     !parseError();
      output Out:
          questionName = DNS_QUESTION_NAME(),
          answerNames = DNS_ANSWER_NAMES(),
          answerData = DNS_ANSWER_DATA();
    }
    () as DNSMessageSink = FileSink(DNSMessageStream) { param file: "debug.TestDNSMessageParserTunneling.DNSMessageStream.out"; format: txt; hasDelayField: true; flush: 1u; }  

}

boolean isSPFAnswer(list<rstring> answerList) {
	for (rstring answer in answerList) { if (size(regexMatchPerl(answer, ".{1,3}v=spf1? ")) > 0 ) return true; }
	return false;
}

boolean isGoogleSiteVerificationAnswer(list<rstring> answerList) {
	for (rstring answer in answerList) { if (size(regexMatchPerl(answer, "^.google-site-verification")) > 0 ) return true; }
	return false;
}

boolean isBase64EncodedAnswer(list<rstring> answerList) {
	for (rstring answer in answerList) { if ( size(regexMatchPerl(answer, "[a-zA-Z0-9/+]{16,}={0,2}")) > 0 ) return true; }
	return false;
}

