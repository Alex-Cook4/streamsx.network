/*
** Copyright (C) 2011, 2015  International Business Machines Corporation
** All Rights Reserved
*/

namespace sample;

use com.ibm.streamsx.network.ipv4::*;
use com.ibm.streamsx.network.source::*;
use com.ibm.streamsx.network.parse::*;

composite TestDNSMessageParserBasic {

	param		
	expression<rstring> $pcapFilename: getSubmissionTimeValue("pcapFilename", "../../SampleNetworkToolkitData/sample_dns+dhcp.pcap" );
	
	type 
	
	PacketType =
		float64 captureTime,			// time that packet was captured, in seconds since Unix epoch 
	    rstring ipSourceAddress,		// IP source address
	    rstring ipDestinationAddress,	// IP destination address
		blob dnsMessage;				// contents of packet payload, following all network headers

	DNSMessageType = 
		float64 captureTime,			// time that packet was captured, in seconds since Unix epoch 
	    rstring ipSourceAddress,		// IP source address
	    rstring ipDestinationAddress,	// IP destination address
	    boolean isResponse,
	    rstring responseCode,
	    rstring questionName,
	    rstring questionType,
	    list<rstring> answerNames,
	    list<uint32> answerTTLs,
	    list<rstring> answerData,
	    list<rstring> nameserverNames;

	graph

	stream<PacketType> PacketStream as Out = PacketFileSource() {
		param
			pcapFilename: $pcapFilename;
		    inputFilter: "udp port 53";
		    metricsInterval: 0.0;
		output Out:
			captureTime = captureTime(),
			ipSourceAddress = convertIPV4AddressNumericToString(IPV4_SRC_ADDRESS()),
			ipDestinationAddress = convertIPV4AddressNumericToString(IPV4_DST_ADDRESS()),
			dnsMessage = payloadData();
	}
	() as PacketSink = FileSink(PacketStream) { param file: "debug.TestDNSMessageParserBasic.PacketStream.out"; format: txt; hasDelayField: true; flush: 1u; }	

	stream<DNSMessageType> DNSMessageStream as Out = DNSMessageParser(PacketStream) {
	  logic state: { 
		map<uint16,rstring> dnsTypes = { 1: "A", 2: "NS", 3: "MD", 4: "MF", 5: "CNAME", 6: "SOA", 7: "MB", 8: "MG", 9: "MR", 10: "NULL", 11: "WKS", 12: "PTR", 13: "HINFO", 14: "MINFO", 15: "MX", 16: "TXT", 28: "AAAA" };
		map<uint8,rstring> dnsResponseCodes = { 0: "OK", 1: "Format Error", 2: "Server Failure", 3: "Name Error", 4: "[not implemented]", 5: "Server Refused" }; 
	  }
	  param
	      payloadAttribute: dnsMessage;
	  output Out:
	  	  isResponse = RESPONSE_FLAG(),
	  	  responseCode = RESPONSE_CODE() in dnsResponseCodes ? dnsResponseCodes[RESPONSE_CODE()] : (rstring)RESPONSE_CODE(),
	  	  questionName = QUESTION_NAME(),
		  questionType = QUESTION_TYPE() in dnsTypes ? dnsTypes[QUESTION_TYPE()] : (rstring)QUESTION_TYPE(),
	  	  answerNames = ANSWER_NAMES(),
	  	  answerTTLs = ANSWER_TTLS(),
	  	  answerData = ANSWER_DATA(),
	  	  nameserverNames = NAMESERVER_NAMES();
	}
	() as DNSMessageSink = FileSink(DNSMessageStream) { param file: "debug.TestDNSMessageParserBasic.DNSMessageStream.out"; format: txt; hasDelayField: true; flush: 1u; }	


}

