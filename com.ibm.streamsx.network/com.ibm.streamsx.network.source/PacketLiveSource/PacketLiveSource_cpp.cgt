<%
## Copyright (C) 2011, 2015  International Business Machines Corporation
## All Rights Reserved

### for valid values of 'networkInterface' parameter, type '/sbin/ifconfig' on deployment machine
### for valid values of 'filterExpression' parameter, see man page for 'tcpdump' at http://linux.die.net/man/8/tcpdump

unshift @INC, dirname($model->getContext()->getOperatorDirectory()) . "/../impl/bin";
require OutputAssignmentGenerator;

# These fragments of Perl code get strings from the operator's declaration
# in the SPL source code for use in generating C/C++ code for the operator's 
# implementation below

# get the name of this operator's template
my $myOperatorKind = $model->getContext()->getKind();

# get Perl objects for output ports
my $outputPort0 = $model->getNumberOfOutputPorts()>0 ? $model->getOutputPortAt(0) : undef;
my $outputPort1 = $model->getNumberOfOutputPorts()>1 ? $model->getOutputPortAt(1) : undef;

# get C++ expressions for getting the values of this operator's required parameters
my $networkInterface = $model->getParameterByName("networkInterface")->getValueAt(0)->getCppExpression();
  
# get C++ expressions for getting the values of this operator's optional parameters  
my $filterExpression = $model->getParameterByName("filterExpression") ? $model->getParameterByName("filterExpression")->getValueAt(0)->getCppExpression() : undef;
my $timestampType = $model->getParameterByName("timestampType") ? $model->getParameterByName("timestampType")->getValueAt(0)->getCppExpression() : undef;
my $maximumLength = $model->getParameterByName("maximumLength") ? $model->getParameterByName("maximumLength")->getValueAt(0)->getCppExpression() : 65535;
my $initDelay = $model->getParameterByName("initDelay") ? $model->getParameterByName("initDelay")->getValueAt(0)->getCppExpression() : 0;
my $bufferSize = $model->getParameterByName("bufferSize") ? $model->getParameterByName("bufferSize")->getValueAt(0)->getCppExpression() : 0;
my $promiscuous = $model->getParameterByName("promiscuous") ? $model->getParameterByName("promiscuous")->getValueAt(0)->getCppExpression() : 0;
my $processorAffinity = $model->getParameterByName("processorAffinity") ? $model->getParameterByName("processorAffinity")->getValueAt(0)->getCppExpression() : -1;
my $timeout = $model->getParameterByName("timeout") ? $model->getParameterByName("timeout")->getValueAt(0)->getCppExpression() : 0;
my $statisticsInterval = $model->getParameterByName("statisticsInterval") ? $model->getParameterByName("statisticsInterval")->getValueAt(0)->getCppExpression() : 10.0;

# basic safety checks
SPL::CodeGen::exit("Sorry, 'statisticsInterval' is valid only when a second output port is defined") if $model->getParameterByName("statisticsInterval") && $model->getNumberOfOutputPorts()<2; 

%>


<%SPL::CodeGen::implementationPrologue($model);%>


// calls to output assignment functions within expressions are generated with
// an explicit namespace matching the operator tempate name, so it must be
// equated to the operator's namespace

#define PacketLiveSource MY_OPERATOR



// Constructor
MY_OPERATOR::MY_OPERATOR()
{
  SPLLOG(L_TRACE, "entering <%=$myOperatorKind%> constructor ...", "PacketLiveSource");

  // set operator parameters
  networkInterface = <%=$networkInterface%>;
  filterExpression = <%=$filterExpression?$filterExpression:'""'%>;
  timestampType = <%=$timestampType?$timestampType:'""'%>;
  maximumLength = <%=$maximumLength%>;
  initDelay = <%=$initDelay%>;
  bufferSize = <%=$bufferSize%>; 
  promiscuous = <%=$promiscuous%>;
  processorAffinity = <%=$processorAffinity%>;
  timeout = <%=$timeout%>;
  statisticsInterval = <%=$statisticsInterval%>;

#if defined(lib_pcap_pcap_h)

  // log the 'libpcap' version that will be used
  SPLLOG(L_INFO, "using " << pcap_lib_version(), "PacketLiveSource");

  // open the network interface with 'libpcap' version 1.0 or later (for RHEL 6)
  SPLLOG(L_INFO, "opening network interface '" << networkInterface << "'", "PacketLiveSource");

  // create 'libpcap' descriptor for network interface
  char pcapError[PCAP_ERRBUF_SIZE] = "\0";
  pcapDescriptor = pcap_create(networkInterface.c_str(), pcapError);
  if (!pcapDescriptor) THROW (SPLRuntimeOperator, "error creating network interface '" << networkInterface << "', " << pcapError);

#if defined(PCAP_TSTAMP_HOST) 
  // log timestamp types supported by interface
  {
	int * timestampTypes;
	int rc = pcap_list_tstamp_types(pcapDescriptor, &timestampTypes);
	if (rc == PCAP_ERROR) THROW (SPLRuntimeOperator, "error getting timestamp types, " << pcap_geterr(pcapDescriptor));
	SPLLOG(L_INFO, rc << " values available for timestampType parameter", "PacketLiveSource"); 
	for (int i = 0; i < rc; i++) {
	  SPLLOG(L_INFO, "timestampType value '" << pcap_tstamp_type_val_to_name(timestampTypes[i]) << "' available", "PacketLiveSource"); }
	pcap_free_tstamp_types(timestampTypes);
  }
#endif

  // put network interface into promiscuous mode, if specified
  if (promiscuous) { 
	SPLLOG(L_INFO, "putting network interface '" << networkInterface << "' into promiscuous mode", "PacketLiveSource");
	int rc = pcap_set_promisc(pcapDescriptor, 1);
	if (rc) THROW (SPLRuntimeOperator, "error setting promiscuous mode, " << pcap_geterr(pcapDescriptor)); }

  // set maximum packet capture length
  {
	SPLLOG(L_INFO, "setting maximum packet capture length to " << maximumLength << " bytes", "PacketLiveSource");
	int rc = pcap_set_snaplen(pcapDescriptor, maximumLength);
	if (rc) THROW (SPLRuntimeOperator, "error setting maxmum capture length to " << maximumLength << " bytes, " << pcap_geterr(pcapDescriptor));
  }

  // set receive timeout, if specified
  if (timeout) {
	const int milliseconds = (int)(timeout*1000.0);
	SPLLOG(L_INFO, "setting receive timeout to " << timeout << " seconds", "PacketLiveSource");
	int rc = pcap_set_timeout(pcapDescriptor, milliseconds);
	if (rc) THROW (SPLRuntimeOperator, "error setting receive timeout to " << timeout << " seconds, " << pcap_geterr(pcapDescriptor)); }
 
  // set receive buffer size, if specified
  if (bufferSize) {
	SPLLOG(L_INFO, "setting receive buffer size to " << bufferSize << " bytes", "PacketLiveSource");
	int rc = pcap_set_buffer_size(pcapDescriptor, bufferSize); 
	if (rc) THROW (SPLRuntimeOperator, "error setting receive buffer size to " << bufferSize << " bytes, " << pcap_geterr(pcapDescriptor)); }

  // set timestamp type, if specified
  if (!timestampType.empty()) { 
#if defined(PCAP_TSTAMP_HOST)
	SPLLOG(L_INFO, "setting timestamp type to '" << timestampType << "'", "PacketLiveSource");
	const int tt = pcap_tstamp_type_name_to_val(timestampType.c_str());
	if (tt==PCAP_ERROR) THROW (SPLRuntimeOperator, "error converting '" << timestampType << "' to timestamp type, " << pcap_geterr(pcapDescriptor));
	int rc = pcap_set_tstamp_type(pcapDescriptor, tt); 
	if (rc) THROW (SPLRuntimeOperator, "error setting timestamp type to '" << timestampType << "', " << pcap_geterr(pcapDescriptor));
#else
	SPLLOG(L_INFO, "ignoring timestampType parameter", "PacketLiveSource");
#endif
  } 
	
  // activate 'libpcap'
  {
	int rc = pcap_activate(pcapDescriptor);
	if (rc) THROW (SPLRuntimeOperator, "error activating network interface '" << networkInterface << "', " << pcap_geterr(pcapDescriptor));
  }

#elif defined(lib_pcap_h)

  // open the network interface with 'libpcap' version 0.9 or earlier (for RHEL 5)
  SPLLOG(L_INFO, "opening network interface '" << networkInterface << "' with old 'libpcap' API", "PacketLiveSource");

  pcapDescriptor = pcap_open_live(networkInterface, maximumLength, promiscuous, 0, pcapError);
  if (!pcapDescriptor) THROW (SPLRuntimeOperator, "error opening network interface '" << networkInterface << "', " << pcapError);

#else
  // error: 'libpcap' version is not known
#endif

  // get the IP subnet and mask of the network interface
  bpf_u_int32 ipSubnet = 0;
  bpf_u_int32 ipMask = 0;
  {
	char ipSubnetString[INET_ADDRSTRLEN];
	char ipMaskString[INET_ADDRSTRLEN];
	int rc = pcap_lookupnet(networkInterface.c_str(), &ipSubnet, &ipMask, pcapError);
	if (rc) SPLLOG(L_INFO, "could not get subnet and mask for network interface '" << networkInterface << "', " << pcapError, "PacketLiveSource");
	else SPLLOG(L_INFO, "capturing packets on subnet=" << inet_ntop(AF_INET, &ipSubnet, ipSubnetString, sizeof(ipSubnetString)) << 
				", mask=" << inet_ntop(AF_INET, &ipMask, ipMaskString, sizeof(ipMaskString)), "PacketLiveSource");
  }
	
  // compile and activate a filter expression, if there is one
  if (!filterExpression.empty()) {
	SPLLOG(L_INFO, "capturing packets through filter '" << filterExpression << "'", "PacketLiveSource");
	struct bpf_program filterProgram;
	int rc = pcap_compile(pcapDescriptor, &filterProgram, filterExpression.c_str(), 0, ipMask);
	if (rc) THROW (SPLRuntimeOperator, "error compiling PCAP filter '" << filterExpression << "', rc=" << rc << ", " << pcap_geterr(pcapDescriptor));
	rc = pcap_setfilter(pcapDescriptor, &filterProgram);
	if (rc) THROW (SPLRuntimeOperator, "error activating PCAP filter '" << filterExpression << "', rc=" << rc << ", " << pcap_geterr(pcapDescriptor));
  } 
	
  SPLLOG(L_TRACE, "leaving <%=$myOperatorKind%> constructor ...", "PacketLiveSource");
}



// Destructor
MY_OPERATOR::~MY_OPERATOR() 
{
  SPLLOG(L_TRACE, "entering <%=$myOperatorKind%> destructor ...", "PacketLiveSource");

  if (pcapDescriptor) { pcap_close(pcapDescriptor); }

  SPLLOG(L_TRACE, "leaving <%=$myOperatorKind%> destructor ...", "PacketLiveSource");
}



// Notify port readiness
void MY_OPERATOR::allPortsReady() 
{
  SPLLOG(L_TRACE, "entering <%=$myOperatorKind%> allPortsReady() ...", "PacketLiveSource");

  const int threadCount = 2; 
  createThreads(threadCount);
  
  SPLLOG(L_TRACE, "leaving <%=$myOperatorKind%> allPortsReady() ...", "PacketLiveSource");
}
 
 
 
// Notify pending shutdown
void MY_OPERATOR::prepareToShutdown() 
{
  SPLLOG(L_TRACE, "entering <%=$myOperatorKind%> prepareToShutdown() ...", "PacketLiveSource");

  // tell libpcap to stop reading packets
  pcap_breakloop(pcapDescriptor);

  SPLLOG(L_TRACE, "leaving <%=$myOperatorKind%> prepareToShutdown() ...", "PacketLiveSource");

}


void MY_OPERATOR::process(uint32_t idx)
{
  SPLLOG(L_TRACE, "entering <%=$myOperatorKind%> process(" << idx << ") for " << networkInterface, "PacketLiveSource");
    
  switch (idx) {
  case 0: statistics_thread(); break;
  case 1: pcap_thread(); break;
  default: break; }
         
  SPLLOG(L_TRACE, "leaving <%=$myOperatorKind%> process(" << idx << ") for " << networkInterface, "PacketLiveSource");
}



// Tuple processing for mutating ports 
void MY_OPERATOR::process(Tuple & tuple, uint32_t port)
{
}



// Tuple processing for non-mutating ports
void MY_OPERATOR::process(Tuple const & tuple, uint32_t port)
{
}



// Punctuation processing
void MY_OPERATOR::process(Punctuation const & punct, uint32_t port)
{
}




inline void pcapCallback(u_char* correlator, const struct pcap_pkthdr* header, const u_char* buffer) {

	MY_OPERATOR* self = (MY_OPERATOR*)correlator;
	self->processPCAPbuffer(header, buffer);
}



void MY_OPERATOR::processPCAPbuffer(const struct pcap_pkthdr* header, const u_char* buffer) 
{
  // save pointers to the packet header and buffer for the output assignment functions
  pcapHeader = header;
  pcapBuffer = buffer;
  
  // locate the network headers in the packet
  headers.locateNetworkHeaders((char*)pcapBuffer, pcapHeader->caplen, pcapHeader->len);

  // ignore non-IP packets
  if ( ! ( headers.ipv4Header || headers.ipv6Header ) ) { SPLLOG(L_INFO, "ignoring packet, no IPv4 or IPv6 header found", "PacketLiveSource");  return; }

  // set explicitly assigned output attributes to computed values
  OPort0Type outTuple;
  outTuple.clear();
  <% OutputAssignmentGenerator::generate("outTuple", $outputPort0); %> ;

  // send the packet tuple downstream
  SPLLOG(L_TRACE, "submitting outTuple=" << outTuple, "PacketLiveSource");
  submit(outTuple, 0);

  // count the packets and octets produced
  packetCounter++;
  octetCounter += pcapHeader->len;
}	



// this method executes on a separate thread, calling repeatedly into libpcap to
// receive ethernet packets captured from the network interface, which are emitted
// as tuples on output port 0

void MY_OPERATOR::pcap_thread()
{
  SPLLOG(L_TRACE, "entering <%=$myOperatorKind%> pcap_thread() for " << networkInterface, "PacketLiveSource");

  // assign this thread to a particular processor core, if specified
  if (processorAffinity>-1) {
	SPLLOG(L_INFO, "assigning thread " << gettid() << " to processor core " << processorAffinity, "PacketLiveSource");
	cpu_set_t cpumask; // CPU affinity bit mask
	CPU_ZERO(&cpumask);
	CPU_SET(processorAffinity, &cpumask);
	const int rc = sched_setaffinity(gettid(), sizeof cpumask, &cpumask);
	if (rc<0) THROW (SPLRuntimeOperator, "could not set processor affinity to " << processorAffinity << ", " << strerror(errno)); } 

  // wait for a while before starting, if specified
  if (initDelay>0) { 
	SPLLOG(L_INFO, "waiting " << initDelay << " seconds before starting", "PacketLiveSource");
	getPE().blockUntilShutdownRequest(initDelay); } 

  // call into 'libpcap' and wait in there for callbacks with packets to process
  while(!getPE().getShutdownRequested()) {		
	SPLLOG(L_TRACE, "pcap_loop() called", "PacketLiveSource");		
	const int rc = pcap_loop(pcapDescriptor, -1, &pcapCallback, (u_char*)this);
	SPLLOG(L_TRACE, "pcap_loop() returned " << rc, "PacketLiveSource"); }
	
  SPLLOG(L_TRACE, "leaving <%=$myOperatorKind%> pcap_thread() for " << networkInterface, "PacketLiveSource");
}
	
	





  // This method executes on a separate thread, calling into libpcap periodically
  // to get its statistcs counters, which are emitted as tuples on output port 1
  // whenever they change

  void MY_OPERATOR::statistics_thread()
  {
	SPLLOG(L_TRACE, "entering <%=$myOperatorKind%> statistics_thread() for " << networkInterface, "PacketLiveSource");

	// keep the operator's  statistics in these variables
	pcapStatistics = previousPCAPStatistics = (const struct pcap_stat){0};
	packetCounter = previousPacketCounter = 0;
	octetCounter = previousOctetCounter = 0;

	// expose the operator's statistics in these metrics
	OperatorMetrics& opm = getContext().getMetrics();
	Metric* totalPacketsReceived = &opm.getCustomMetricByName("nPacketsReceivedCurrent");
	Metric* totalPacketsDropped = &opm.getCustomMetricByName("nPacketsDroppedCurrent");
	Metric* totalPacketsDroppedByInterface = &opm.getCustomMetricByName("nPacketsDroppedByInterfaceCurrent");
	Metric* totalPacketsProduced = &opm.getCustomMetricByName("nPacketsProducedCurrent");
	Metric* totalOctetsProduced = &opm.getCustomMetricByName("nOctetsProducedCurrent");

	// get statistics periodically and emit a tuple whenever they change
	double previousStatisticsTime = SPL::Functions::Time::getTimestampInSecs();
	while (!getPE().getShutdownRequested()) {

	  // wait until the next interval or the PE is shutting down
	  now = SPL::Functions::Time::getTimestampInSecs();
	  const double secondsToWait = previousStatisticsTime + statisticsInterval - now;
	  if (secondsToWait>0) {
		SPLLOG(L_DEBUG, "next statistics interval in " << secondsToWait << " seconds", "PacketLiveSource");
		getPE().blockUntilShutdownRequest(secondsToWait);
		now = SPL::Functions::Time::getTimestampInSecs();
	  } else {
		SPLLOG(L_DEBUG, "missed statistics interval by " << -secondsToWait << " seconds", "PacketLiveSource");
	  }

	  // get recieved and dropped statistics from 'libpcap'
	  pcap_stats(pcapDescriptor, &pcapStatistics);

	  // expose the operator's statistics as metrics if they have changed since the last interval
	  if ( packetCounter != previousPacketCounter ) {
		totalPacketsReceived->setValue(pcapStatistics.ps_recv);
		totalPacketsDropped->setValue(pcapStatistics.ps_drop);
		totalPacketsDroppedByInterface->setValue(pcapStatistics.ps_ifdrop);
		totalPacketsProduced->setValue(packetCounter);
		totalOctetsProduced->setValue(octetCounter); }

<% if ($outputPort1) { %>
	  // emit a statistics tuple if they have changed since the last interval
	  if ( packetCounter != previousPacketCounter ) {
		OPort1Type outTuple;
		outTuple.clear();
		<% OutputAssignmentGenerator::generate("outTuple", $outputPort1); %> ;
		SPLLOG(L_TRACE, "submitting outTuple=" << outTuple, "PacketLiveSource");
		submit(outTuple, 1); }
  <% } %> ;
	
	  // save the current statistics values for next interval
	  previousPCAPStatistics = pcapStatistics;
	  previousPacketCounter = packetCounter;
	  previousOctetCounter = octetCounter;
	  previousStatisticsTime = now;
	}

	SPLLOG(L_TRACE, "leaving <%=$myOperatorKind%> statistics_thread() for " << networkInterface, "PacketLiveSource");
  }




<%SPL::CodeGen::implementationEpilogue($model);%>
