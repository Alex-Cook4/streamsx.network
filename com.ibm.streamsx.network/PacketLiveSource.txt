Copyright (C) 2011, 2015  International Business Machines Corporation
All Rights Reserved



Network Toolkit: PacketLiveSource operator
------------------------------------------


_____Description_____


PacketLiveSource is an operator for the IBM InfoSphere Streams product that
captures live network packets from one of the network interfaces attached to the
machine where it executes. The operator parses the network headers, and emits
tuples containing packet data.  The tuples may contain the entire packet, the
payload portion of the packet, or individual fields from the network headers, as
specified by output attribute assignments.  The operator may produce zero, one,
or more tuples from each packet it processes, depending upon optional input and
output filters.

The PacketLiveSource operator reads complete ethernet packets, starting with the
ethernet header, including all protocol-specific headers and the packet payload.
The ethernet frame format is described here:

    http://en.wikipedia.org/wiki/Ethernet_frame

The PacketLiveSource operator can parse fields from the ethernet, IPv4, IPv6,
UDP, and TCP headers of the input packet, and can assign the values of
individual fields to output attributes, as specified by the output assignment
expressions.  Fields are not parsed unless the corresponding output function is
specified.

The ethernet header and the fields it contains are described here:

    http://linux.die.net/include/net/ethernet.h
    http://linux.die.net/include/linux/if_ether.h

The IPv4 header and the fields it contains are described here:

    http://en.wikipedia.org/wiki/IPv4
    http://www.ietf.org/rfc/rfc791.txt
    http://linux.die.net/include/netinet/in.h
    http://linux.die.net/include/netinet/ip.h

The IPv6 header and the fields it contains are described here:

    https://en.wikipedia.org/wiki/IPv6_packet
    https://tools.ietf.org/html/rfc2460
    http://linux.die.net/include/netinet/ip6.h

The UDP header and the fields it contains are described here:

    http://en.wikipedia.org/wiki/User_Datagram_Protocol
    http://tools.ietf.org/html/rfc768
    http://linux.die.net/include/netinet/udp.h

The TCP header and the fields it contains are described here:

    http://en.wikipedia.org/wiki/Transmission_Control_Protocol
    http://tools.ietf.org/html/rfc793
    http://linux.die.net/include/netinet/tcp.h

This operator steps quietly over 'jmirror' headers prepended to packets
by Juniper Networks 'mirror encapsulation', as described here:

    http://wiki.wireshark.org/jmirror

This operator is part of the network toolkit. The toolkit includes several
sample applications that illustrate how to use the operator.


_____Capabilities_____


Network interfaces normally ignore packets that are not addressed to them.
However, when 'promiscious' mode is enabled on a network interface, it can
capture all network packets on its ethernet segment, even those that are not
addressed to it.  This is sometimes referred to as "network sniffing".  Modern
ethernet switches normally send network interfaces only packets that are
addressed to them; 'promiscious' mode is useful only when a switch has been
specifically configured to send packets that are not addressed to a network
interface.

The PacketLiveSource operator may enable 'promiscuous' mode in a ethernet
interface if its 'promiscous' parameter is set to 'true', or the value of its
'inputFilter' parameter requires it.  If so, the operator will require
special Linux capabilities to execute. Linux capabilities are described here:

    http://linux.die.net/man/7/capabilities

The PacketLiveSource operator requires these Linux capabilities:

    CAP_NET_RAW+eip 
    CAP_NET_ADMIN+eip

Streams applications that are built in standalone mode should be compiled with
the '--static-link' option and then granted these capabilities, like this:

    sudo setcap 'CAP_NET_RAW+eip CAP_NET_ADMIN+eip' .../bin/standalone.exe

Streams applications that are built in distributed mode should be compiled with
the '--static-link' option and then must be submitted to a Streams instance and
domain that have been registered as a Linux system service. The Streams runtime
will then grant capabilities to the submitted application.


_____Dependencies_____


The PacketLiveSource operator depends upon the Linux 'packet capture library
(libpcap)'.  The library must be installed on the machine where this operator
executes. It is available as an installable 'repository package (RPM)' from the
'base' RHEL and CentOS repositories.  It can be installed with administrator
tools such as 'yum'.  This requires root privileges, which can be acquired
temporarily with administrator tools such as 'sudo'.

To install 'libpcap', enter this command at a Linux command prompt:

    sudo yum install libpcap-devel

Alternatively, you can download the source code for a newer version of 'libpcap'
and build the library yourself. The new library can then be installed in system
directories, or used where built without being installed.

To do this, download the distribution package for the latest version of
'libpcap' from this address:

    http://www.tcpdump.org/

To build libpcap from source code, open a 'terminal' window and type this at a
command prompt:

    cd .../directory
    tar -xvf .../libpcap-X.Y.Z.tar.gz 
    cd .../directory/libpcap-X.Y.Z
    ./configure
    make

To instruct the Streams compiler (that is, the 'sc' command) to use your version
of 'libpcap' instead of the system version, set these environment variables
before compiling an application that contains the PacketLiveSource operator:

    export STREAMS_ADAPTERS_LIBPCAP_INCLUDEPATH=.../directory/libpcap-X.Y.Z
    export STREAMS_ADAPTERS_LIBPCAP_LIBPATH=.../directory/libpcap-X.Y.Z

For more information on configuring, building, and installing 'libpcap', refer
to its 'INSTALL.txt' file.

This operator has been tested with these versions of 'libpcap':

    libpcap 0.9.4, included in RHEL/CentOS 5.x
    libpcap 0.9.8, included in SLES 11
    libpcap 1.0.0, included in RHEL/CentOS 6.2
    libpcap 1.4.0, included in RHEL/CentOS 6.5
    libpcap 1.5.3, included in RHEL/CentOS 7.1
    libpcap 1.6.1
    libpcap 1.6.2
	libpcap 1.7.4

This operator is implemented in C/C++, and calls the library 'libpcap' via the
functions defined in the header file <pcap.h>.  These functions are documented
in the manual page 'pcap', for example here:

    http://linux.die.net/man/3/pcap


_____Input Ports_____


The PacketLiveSource operator has no input ports.  


_____Output Ports_____


The PacketLiveSource operator has one or more output ports: 

  * Each output port may produce tuples containing packets, payloads, or network
    header fields, as specified by output attribute assignments (see the
    Assignments section below). The tuples may optionally be filtered on output
    (see the 'outputFilters' parameter below).

Each packet processed by the operator (and passed by the input filter, if one is
specified) may be emitted by each output port (if passed by the corresponding
output filter, if one is specified), and may assign different fields to
different output attributes.

The PacketLiveSource operator does not produce punctuation.


_____Parameters_____

   networkInterface -- This required parameter takes an expression of type
      'rstring' that specifies which network interface the operator will capture
      packets from.  The value must be one of the network interface names
      configured in Linux on the machine where the operator will execute.  To
      display a list of configured network interface names, type this at a Linux
      command prompt:

          /sbin/ifconfig

   maximumLength -- This optional parameter takes an expression of type 'uint16'
      that specifies the maximum length in bytes of the packet data that will be
      produced by the operator.  This length includes all network headers;
      packets longer than the specified length will be truncated.

      The default value of the 'maximumLength' parameter is 65,535 bytes.

   promiscuous -- This optional parameter takes an expression of type 'boolean'
      that specifies whether or not 'promiscuous' mode should be enabled on the
      network interface.

      The default value of the 'promiscuous' parameter is 'false'.  However,
      some values of the 'inputFilter' parameter, including the default value,
      require that 'promiscuous' mode be enabled on the network interface, even
      if the 'promiscous' parameter is not specified, or set to 'false'.

      Note that if 'promiscious' mode is enabled on the network interface, the
      operator must execute with special Linux capabilities, as described above.

   bufferSize -- This optional parameter takes an expression of type 'uint32'
      that specifies the size, in bytes, of the 'libpcap' buffer used for
      receiving packets.  The maximum value allowed is 2,147,483,647 (that is,
      2**31-1).

      The default value of the 'bufferSize' parameter is determined by 'libpcap'.

   timeout -- This optional parameter takes an expression of type 'float64' that
      specifies a timeout for the 'libpcap' interface.  If this value is
      specified, the operator will call the 'libpcap' interface again whenever
      it times out, until the PE containing the operator receives a shutdown
      signal.  

      The default is no timeout.  This may cause the thread that runs the
      'libpcap' interface to hang on shutdown until another packet is received.

   timestampType -- This optional parameter takes a value of 'host', 'adapter',
      or 'adapter_unsynced', which specifies which type of timestamp will be
      assigned to packets as they are received.

      The default value is 'host'.

   inputFilter -- This optional parameter takes an expression of type 'rstring'
      that specifies which input packets should be processed. The value of this
      string must be a valid PCAP filter expression, as defined here:

          http://www.tcpdump.org/manpages/pcap-filter.7.html
          http://linux.die.net/man/7/pcap-filter

      The default value of the 'inputFilter' parameter is an empty string, which
      causes all packets read from the PCAP file to be processed.

   outputFilters -- This optional parameter takes a list of expressions of type
      'rstring' that specify which input packets should be emitted by the
      corresponding output port. The number of expressions in the list must
      match the number of output ports.  The values of the strings must be
      valid PCAP filter expressions, as defined here:

          http://www.tcpdump.org/manpages/pcap-filter.7.html
          http://linux.die.net/man/7/pcap-filter

      The default value of the 'outputFilters' parameter is an empty list, which
      causes all packets processed to be emitted by all output ports.

   initDelay -- This optional parameter takes an expression of type 'float64'
      that specifies the number of seconds the operator will wait before it
      begins to produce tuples.  This parameter is allowed only when the
      'pcapFilename' parameter is also specified.  

      The default value of the 'initDelay' parameter is '0.0'.

   processorAffinity -- This optional parameter takes an expression of type
      'unit32' that specifies which processor core the operator's thread will
      run on.  The maximum value is 'P-1', where P is the number of processors
      on the machine where the operator will run.  If this parameter is
      specified, then the operator's thread will be dispatched only on the
      specified processor.  This parameter is allowed only if the 'pcapFilename'
      parameter is also specified.  If instead the operator is configured with
      an input port, then the operator runs on the thread of the upstream
      operator, and is dispatched according to that thread's processor affinity.

      The default is to dispatch the operator's thread on any available processor.

   metricsInterval -- This optional parameter takes an expression of type
      'float64' that specifies the interval, in seconds, for sending operator
      metrics to the Streams runtime. If the value is zero or less, the operator
      will not report metrics to the runtime, and the output assigment functions
      for 'libpcap' statistics will be zero.

      The default value of the 'metricsInterval' parameter is '10.0'.


_____Windowing_____


The PacketLiveSource operator does not accept any window congfiguration.


_____Assignments____


The PacketLiveSource operator emits one output tuple for each packet read from
an ethernet interface.  All attributes of output tuples must be assigned values,
either with explicit assignment expressions, or implicitly by copy from input
tuples (when an input port is specified).  Assignment expressions may use any of
the following functions, which are specific to this operator:

   uint64 packetsReceived() -- This function assigns the total number of packets
      received by the network interface, as counted by 'libpcap'.

   uint64 packetsDropped() -- This function assigns the total number of
      packets dropped because there was no room in the operating system's buffer
      when they arrived, as counted by 'libpcap'.  The value will always be zero
      on Linux kernels prior to version 2.4, which do not count dropped packets.
      You can display the kernel version of your machine by typing this at a
      Linux command prompt:

          uname -r

   uint64 packetsDroppedByInterface() -- This function assigns total number of
      packets dropped by the network interface adapter or its kernel driver, as
      counted by 'libpcap'.  The value may be zero if the counter is not
      implemented by the adapter or driver.

   uint64 packetsProcessed() -- This function assigns the total number of packets
      that have been processed so far. When an input filter is specified, this value
      includes only the packets that pass the filter.

   uint64 octetsProcessed() -- This function assigns the total number of bytes
      of packet data that have been processed so far. When an input filter is
      specified, this value includes only the packets that pass the filter.

   uint32 CAPTURE_SECONDS() -- This function assigns the time when the packet
      was captured to an output attribute.  The value is represented as seconds
      since the beginning of the Unix epoch (midnight in the GMT/UTC timezone on
      January 1st, 1970).

   uint32 CAPTURE_MICROSECONDS() -- This function assigns the faction of a
      second past CAPTURE_SECONDS() when the packet was captured.  The value is
      represented as microseconds.

   uint32 PACKET_LENGTH() -- This function assigns the length of a packet to an
      output attribute.  The value includes all network headers and the entire
      packet body.  Note that this value may be larger than the length of the
      binary data assigned to a 'blob' attribute by the 'PACKET_DATA()' function
      if the packet was truncated when the PCAP file was created.

   blob PACKET_DATA() -- This function assigns the packet data to an output
      attribute.  The value includes all network headers and the entire packet
      body.  Note that the data may be truncated when the PCAP file was created.

   uint32 PAYLOAD_LENGTH() -- This function assigns the length of the payload
      portion of a packet to an output attribute.  The value includes only the
      length of the body of the packet, and excludes the length of the network
      headers.  Note that this value may be larger than the length of the binary
      data assigned to a 'blob' attribute by the 'PAYLOAD_DATA()' function if the
      packet was truncated when the PCAP file was created.

   blob PAYLOAD_DATA() -- This function assigns the payload portion of a packet
      to an output attribute.  The value includes only the body of the packet,
      excluding all network headers.  Note that the data may be truncated when
      the PCAP file was created.

  list<uint8> ETHER_SRC_ADDRESS() -- This function returns the source MAC
      address from the ethernet header of the packet.

  list<uint8> ETHER_DST_ADDRESS() -- This function returns the destination MAC
      address from the ethernet header of the packet.

  uint32 ETHER_PROTOCOL() -- This function returns the protocol field from the
      ethernet header of the packet.  For example, a value of 0x0800==2048 means
      the packet contains an IPv4 header, and 0x86DD==34525 means the packet
      contains an IPv6 header.

  uint8 IP_VERSION() -- This function returns the version field from the IP
      header of the packet, if it has one, or zero if not.  For example, a value
      of 4 means the header is in IPv4 format, and 6 means the header is in IPv6
      format.
  
  uint8 IP_PROTOCOL() -- This function returns the protocol field from the IP
      header of the packet, if it has one, or zero if not.  For example, a value
      of 0x01==1 means the packet contains an ICMP header, a value of 0x6==6
      means it contains a TCP header, and a value of 0x11==17 means it contains
      a UDP header.

  uint32 IPV4_SRC_ADDRESS() -- This function returns the source address field
      from the IPv4 header of the packet, if it has one, or zero if not.

  uint32 IPV4_DST_ADDRESS() -- This function returns the destination address
      field from the IPv4 header of the packet, if it has one, or zero if not.

  list<uint8> IPV6_SRC_ADDRESS() -- This function returns the source address field
      from the IPv6 header of the packet, if it has one, or zero if not.

  list<uint8> IPV6_DST_ADDRESS() -- This function returns the destination address
      field from the IPv6 header of the packet, if it has one, or zero if not.

  uint16 IP_SRC_PORT() -- This function returns the source port field from
      the UDP or TCP header of the packet, if it has one, or zero if not.
  
  uint16 IP_DST_PORT() -- This function returns the destination port field from
      the UDP or TCP header of the packet, if it has one, or zero if not.
  
  uint16 UDP_SRC_PORT() -- This function returns the source port field from
      the UDP header of the packet, if it has one, or zero if not.
  
  uint16 UDP_DST_PORT() -- This function returns the destination port field from
      the UDP header of the packet, if it has one, or zero if not.

  uint16 TCP_SRC_PORT() -- This function returns the source port field from
      the TCP header of the packet, if it has one, or zero if not.

  uint16 TCP_DST_PORT() -- This function returns the destination port field from
      the TCP header of the packet, if it has one, or zero if not.

  uint32 TCP_SEQUENCE() -- This function returns the sequence number field from
      the TCP header of the packet, if it has one, or zero if not.

  uint32 TCP_ACKNOWLEDGEMENT() -- This function returns the sequence number
      acknowledgement field from the TCP header of the packet, if it has one, or
      zero if not.

  boolean TCP_FLAGS_URGENT() -- This function returns the urgent flag from the
      TCP header of the packet, if it has one, or zero if not.

  boolean TCP_FLAGS_ACK() -- This function returns the acknowledgement flag from the
      TCP header of the packet, if it has one, or zero if not.

  boolean TCP_FLAGS_PUSH() -- This function returns the push flag from the
      TCP header of the packet, if it has one, or zero if not.

  boolean TCP_FLAGS_RESET() -- This function returns the reset flag from the
      TCP header of the packet, if it has one, or zero if not.

  boolean TCP_FLAGS_SYN() -- This function returns the synchronize flag from the
      TCP header of the packet, if it has one, or zero if not.

  boolean TCP_FLAGS_FIN() -- This function returns the final flag from the
      TCP header of the packet, if it has one, or zero if not.

  uint16 TCP_WINDOW() -- This function returns the window size field from
      the TCP header of the packet, if it has one, or zero if not.


_____Threads_____


The PacketLiveSource operator contains a separate thread for running 'libpcap',
which receives network packets from the operating system and produces tuples
from them.

The PacketLiveOperator contains a separate thread for reporting its metrics to
the Streams runtime if the 'metricsInterval' parameter is greater than zero.


_____Metrics_____


The PacketLiveSource operator provides these Streams metrics when it is executed
in Distributed mode application:


  * nPacketsReceivedCurrent: the number of packets received by the network
    interface, as counted by 'libpcap'.

  * nPacketsDroppedCurrent: the number of packets dropped because there was no
    room in the operating system's buffer when they arrived, as counted by
    'libpcap'.

  * nPacketsDroppedByInterfaceCurrent: number of packets dropped by the network
    interface adapter or its kernel driver, as counted by 'libpcap'.  The value
    may be zero if the counter is not implemented by the adapter or driver.

  * nPacketsProcessedCurrent: number of packets processed by the operator.  When
    an input filter is specified, this includes only packets that pass the
    filter.

  * nOctetsProcessedCurrent: number of bytes of packet data processed by the
    operator.  When an input filter is specified, this includes only packets
    that pass the filter.


_____Exceptions_____


The PacketLiveSource operator will throw an exception and terminate in these
situations:

   -- The parameter 'networkInterface' does not specify a network interface
      defined on the machine where the operator executes.

   -- The 'inputFilter' and 'outputFilters' parameters do not specify a valid
      PCAP filter expression.


_____Tuning_____


The PacketLiveSource operator is often used in applications that ingest packets
at very high rates.  In these situations, the rate may be limited by the size of
the Linux network buffers.  If so, you can increase the size of these buffers by
setting Linux network configuration parameters.  Note that root privileges are
required to do this.

You can display the current values of the ethernet and IP configuration
parameters by entering these commands at a Linux prompt:

    /sbin/sysctl net.core
    /sbin/sysctl net.ipv4
  
For example, these are typical default values for Linux configuration parameters
in RHEL/CentOS 5 and 6:

    net.core.wmem_default = 124928
    net.core.rmem_default = 124928
    net.core.rmem_max = 131071
    net.core.wmem_max = 131071
    net.core.netdev_max_backlog = 1000

    net.ipv4.tcp_rmem = 4096        87380   4194304
    net.ipv4.tcp_wmem = 4096        16384   4194304
    net.ipv4.tcp_window_scaling=1

You can change the current values of Linux configuration parameters by executing
these commands at a Linux prompt.  For example:

    # allow packet buffers to increase up to 64MB 
    sudo /sbin/sysctl -w net.core.rmem_max=67108864
    sudo /sbin/sysctl -w net.core.wmem_max=67108864 

    # increase the length of the processor input queue to 50,000
    sudo /sbin/sysctl -w net.core.netdev_max_backlog=50000

    # increase autotuning TCP buffer limit to 32MB
    sudo /sbin/sysctl -w net.ipv4.tcp_rmem=10240 87380 33554432
    sudo /sbin/sysctl -w net.ipv4.tcp_wmem=10240 87380 33554432

Changes to Linux configuration parameters with /sbin/sysctl persist only for the
current instance of Linux; they will revert to their default values when Linux
is rebooted. To change the default values used when Linux boots, specify them in
the Linux system file '/etc/sysctl.cfg'.

For more information, refer to 'http://fasterdata.es.net/host-tuning/linux/'.


_____Examples_____


The SamplePacketLiveSource project in this toolkit contains examples of this
operator.  The SampleNetworkToolkitData project in this toolkit contains data
for the sample applications.


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
