Copyright (C) 2011, 2015  International Business Machines Corporation
All Rights Reserved



Network Toolkit: NetflowMessageParser operator
----------------------------------------------


_____Description_____


NetflowMessageParser is an operator for the IBM InfoSphere Streams product that
that parses flow records within Netflow version 5 and 9 messages received in
input tuples. Each flow record is emitted as a separate output tuple with
specified fields from the record assigned to output attributes.  Other output
attributes are implicitly copied from input attributes.

The NetflowMessageParser operator expects only Netflow messages in its input
tuples, without any of the headers that precede them in network packets.  The
PacketLiveSource and PacketFileSource operators can produce tuples that contain
Netflow messages, using their 'payloadData()' output attribute assignment
functions.

The NetflowMessageParser operator parses fields in flow records within Netflow
version 5 and version 9 messages, and assigns their values to output attributes,
as specified by output attribute assignment functions.

Netflow version 5 messages and the fields they contain are described here:

    http://tools.ietf.org/html/rfc1035
    http://www.cisco.com/c/en/us/td/docs/net_mgmt/netflow_collection_engine/3-6/user/guide/format.html#wp1006108

Netflow version 9 messages and the fields they contain are described here:

    https://www.ietf.org/rfc/rfc3954.txt
    http://www.iana.org/assignments/ipfix/ipfix.xhtml
    http://www.cisco.com/en/US/technologies/tk648/tk362/technologies_white_paper09186a00800a3db9.html


Each input tuple processed by the NetflowMessageParser operator may produce
zero, one, or more output tuples, depending upon how many flow records it
contains and how its filters and output ports are configured. Malformed Netflow
messages may produce incomplete output tuples. Parsing errors are logged in the
operator's PE log; applications can filter or label malformed Netflow messages
with output assignment functions.

The NetflowMessageParser operator is part of the network toolkit. To use it in an
application, include this statement in the SPL source file:

    use com.ibm.streamsx.network.parse::*;

The network toolkit includes several sample applications that illustrate how to
use the operator.


_____Input Ports_____


The NetflowMessageParser operator has one required input port with two required
attributes:

    One input attribute must be of type 'blob' and must contain a Netflow message,
    minus the network headers that proceed them in network packets, as specified
    by the required parameter 'messageAttribute'.

    One input attribute must be of type 'uint32' and must contain the IPv4
    source address of the router that sent the Netflow message, as specified by
    the required parameter 'sourceAttribute'.

The PacketLiveSource and PacketFileSource operators in the toolkit can be used
to produce attributes that can be consumed by the NetflowMessageParser operator.


_____Output Ports_____


The NetflowMessageParser operator emits a separate output tuple for each flow
record in a Netflow message. The operator may be configured with one or more
output ports:

  * Each output port may produce tuples containing fields from a flow record, as
    specified by output attribute assignments (see the Assignments section
    below).  The tuples may optionally be filtered on output (see the
    'outputFilters' parameter below).

Each message processed by the operator may be emitted by each output port if
passed by the corresponding output filter, if one is specified, and may assign
different fields to different output attributes.

The NetflowMessageParser operator does not produce punctuation.


_____Parameters_____


   messageAttribute -- This required parameter specifies an input attribute of
      type 'blob' that contains a Netflow messages to be parsed by the operator.

   sourceAttribute -- This required parameter specifies an input attribute of
      type 'uint32' that contains the IPv4 source address of the router that
      sent the Netflow message.

   outputFilters -- This optional parameter takes a list of SPL expressions that
      specify which Netflow messages should be emitted by the corresponding output
      port. The number of expressions in the list must match the number of
      output ports, and each expression must evaluate to a boolean value.  The
      default value of the 'outputFilters' parameter is an empty list, which
      causes all Netflow messages processed to be emitted by all output ports.

   processorAffinity -- This optional parameter takes an expression of type
      'uint32' that specifies which processor core the operator's thread will
      run on.  The maximum value is 'P-1', where P is the number of processors
      on the machine where the operator will run.  

      Where the operator runs on a thread of its own, this parameter applies to
      the operator's thread.  This is the situation when the operator's input
      port is configured as a threaded input port, and when the operator has an
      @parallel annotation.

      Where the operator runs on the thread of an upstream operator, this
      parameter affects the thread of the operator that sends tuples to it. This
      is the situation when the operator is fused with an upstream operator.

      The default is to dispatch the operator's thread on any available
      processor.


_____Windowing_____


The NetflowMessageParser operator does not accept any window congfiguration.


_____Results____


The NetflowMessageParser operator emits a separate output tuple for each flow
record within a Netflow message, optionally filtered by the 'outputFilters'
parameter.  Specified fields from each flow record are assigned to output
attributes with the result functions described below.

All attributes of all output ports must be assigned values, either with explicit
assignment expressions, or implicitly by copy from input tuples.

Output filters and attribute assignments are SPL expressions. They may use any
of the built-in SPL functions, and any of the following functions, which are
specific to this operator.

For Netflow version 5 messages, there are result functions for each field in the
message header and flow records.  For Netflow version 9 messages, there are
result functions for each field in the message header and the standardized
fields in flow records.  Nonstandardized fields in flow records can be accessed
by field number.

These functions return values that indicate parsing errors:

    boolean parseError -- This result function returns 'true' if an error was
        found while parsing the input Netflow message, or 'false' if no encoding
        errors were found.

    rstring parseErrorDescription -- This result function returns a short
        description of the first encoding error, if any were found, or an empty
        string no encoding errors were found.

    uint32 parseErrorOffset -- This result function returns the offset into the
        Netflow message of the first encoding error, if any were found, or zero if
        no encoding errors were found.

    uint64 messagesProcessed -- This result function returns the number of Netflow
        messages processed.


These functions return the values of header fields in Netflow messages, so they
return the same value for all output tuples produced from the same Netflow message:

    uint16 NETFLOW_VERSION() -- Netflow version, either '5' or '9'.

    uint16 NETFLOW_COUNT() -- Number of records in this message, including
        templates, options, and flows.

    uint32 NETFLOW_SYSTEM_UPTIME() -- Time since router that sent this message
        was booted, in milliseonds.

    uint32 NETFLOW_UNIX_SECONDS() -- Time since beginning of Unix epoch, in
        seconds, according to the clock in the router that sent the Netflow
        message.

    uint32 NETFLOW_UNIX_NANOSECONDS() -- Fraction of a second since
        NETFLOW_UNIX_SECONDS, in nanoseconds (for Netflow version 5), or zero
        (for Netflow version 9).

    uint32 NETFLOW_SEQUENCE_NUMBER() -- Sequence number of this message (for
        Netflow version 9), or, sequence number of the first flow record in this
        message (for Netflow version 5).

    uint32 NETFLOW_SOURCE_ID() -- Identifier from the router that sent this
        Netflow message.


These functions return the values of fields in individual flows within Netflow
messages, so they return different values for each output tuple produced from
the same Netflow message.  These fields are present in all Netflow version 5
messages and are usually present in Netflow verson 9 messages:

    uint64 NETFLOW_IN_BYTES() -- Number of bytes in this flow, as counted by
        incoming interface of router (field 1 for Netflow version 9).

    uint64 NETFLOW_IN_PKTS() -- Number of packets in this flow, as counted by
        incoming interface of router (field 2 for Netflow version 9).

    uint64 NETFLOW_FLOWS() -- Nuber of flows that were aggregated for this
        record (field 3 for Netflow version 9) or zero if not available.

    uint8 NETFLOW_PROTOCOL() -- IP protocol of this flow, usually one of '1' for
        ICMP, '6' for TCP, or '17' for UDP (field 4 for Netflow version 9).

    uint8 NETFLOW_SRC_TOS() -- IP 'type of service' of this flow, as detected by
        incoming interface of router (field 5 for Netflow version 9).

    uint8 NETFLOW_TCP_FLAGS() -- Cumulative TCP flags in this flow (field 6 for
        Netflow version 9).

    uint16 NETFLOW_SRC_PORT() -- IP source port number of this flow (field 7 for
        Netflow version 9).

    uint32 NETFLOW_IPV4_SRC_ADDR() -- IPv4 source address of this flow (field 8
        for Netflow version 9).

    uint8 NETFLOW_SRC_MASK() -- Number of significant bits in subnet mask of
        IPv4 source address (field 9 for Netflow version 9).

    uint32 NETFLOW_INPUT_INTERFACE() -- Incoming interface number of this flow
        on router (field 10 in Netflow version 9).

    uint16 NETFLOW_DST_PORT() -- IP destination port number of this flow (field
        11 in Netflow version 9).

    uint32 NETFLOW_IPV4_DST_ADDR() -- IPv4 destination address of this flow
        (field 12 in Netflow version 9).

    uint8 NETFLOW_DST_MASK() -- Number of significant bits in subnet mask of
        IPv4 destination address (field 13 in Netflow version 9).

    uint32 NETFLOW_OUTPUT_INTERFACE() -- Outgoing interface number of this flow
        on router (field 14 in Netflow version 9).

    uint32 NETFLOW_IPV4_NEXT_HOP() -- IPv4 address of next-hop router in this
        flow (field 15 in Netflow version 9).

    uint32 NETFLOW_SRC_AS() -- Source BGP autonomous system number of IPv4
        source address (field 16 in Netflow version 9).

    uint32 NETFLOW_DST_AS() -- Destination BGP autonomous system number of IPv4
        destination address (field 17 in Netflow version 9).

    uint32 NETFLOW_LAST_SWITCHED() -- Time that the last packet in this flow
        passed through the router, relative to when the router was booted, in
        milliseconds (field 21 in Netflow version 9).

    uint32 NETFLOW_FIRST_SWITCHED() -- Time that the first packet in this flow
        passed through the router, relative to when the router was booted, in
        milliseconds (field 22 in Netflow version 9).

    uint64 NETFLOW_OUT_BYTES() -- Number of bytes in this flow, as counted by
        outgoing interface of router (field 1 for Netflow version 23).

    uint64 NETFLOW_OUT_PKTS() -- Number of packets in this flow, as counted by
        outgoing interface of router (field 1 for Netflow version 23).


For flows in Netflow version 9 messages, these functions return the value of the
specified field number, cast to a particular SPL type, if present:

    uint64 NETFLOW_FIELD_AS_INTEGER(int32 field) -- The value of the specified
        Netflow version 9 field (see field numbers above), cast to an integer,
        or zero if not available.

    rstring NETFLOW_FIELD_AS_STRING(int32 field) -- The value of the specified
        Netflow version 9 field (see field numbers above), cast to an string, or
        an empty string if not available.

    list<uint8> NETFLOW_FIELD_AS_BYTE_LIST(int32 field) -- The value of the
        specified Netflow version 9 field (see field numbers above), cast to a
        byte list, or an empty list if not available.


For flows in Netflow version 9 messages, these functions return the value of the
corresponding field, if present:

    uint32 NETFLOW_BGP_IPV4_NEXT_HOP() -- IPv4 address of next-hop router in BGP
        domain (field 18 in Netflow version 9), or zero if not available.

    uint64 NETFLOW_MUL_DST_PKTS() -- IP multicast outgoing packet counter (field
        19 in Netflow version 9), or zero if not available.

    uint64 NETFLOW_MUL_DST_BYTES() -- IP multicast outgoing byte counter (field
        20 in Netflow version 9), or zero if not available.

    uint16 NETFLOW_MIN_PKT_LNGTH() -- Minimum IP packet length on incoming
        packets of the flow (field 25 in Netflow version 9), or zero if not
        available.

    uint16 NETFLOW_MAX_PKT_LNGTH() -- Maximum IP packet length on incoming
        packets of the flow (field 26 in Netflow version 9), or zero if not
        available.

    list<uint8> NETFLOW_IPV6_SRC_ADDR() -- IPv6 source address of this flow
        (field 27 in Netflow version 9), or zero if not available.

    list<uint8> NETFLOW_IPV6_DST_ADDR() -- IPv6 destination address of this flow
        (field 28 in Netflow version 9), or zero if not available.

    uint8 NETFLOW_IPV6_SRC_MASK() -- Length of the IPv6 source address mask in
        contiguous bits (field 29 in Netflow version 9), or zero if not available.

    uint8 NETFLOW_IPV6_DST_MASK() -- Length of the IPv6 destination address mask
        in contiguous bits (field 30 in Netflow version 9), or zero if not
        available.

    uint32 NETFLOW_IPV6_FLOW_LABEL() -- IPv6 flow label as per RFC 2460
        definition (field 31 in Netflow version 9), or zero if not available.

    uint16 NETFLOW_ICMP_TYPE() -- ICMP packet type, encoded as "ICMPType<<8 |
        ICMPCode" (field 32 in Netflow version 9), or zero if not available.

    uint8 NETFLOW_MUL_IGMP_TYPE() -- Internet Group Management Protocol (IGMP)
        packet type (field 33 in Netflow version 9), or zero if not available.

    uint32 NETFLOW_SAMPLING_INTERVAL() -- packet sampling rate when sampled
        Netflow is used, for example, a value of 100 indicates that one of every
        100 packets is sampled (field 34 in Netflow version 9), or zero if not
        available.

    uint8 NETFLOW_SAMPLING_ALGORITHM() -- The type of algorithm used for sampled
        NetFlow: '1' for deterministic sampling, 2 for random sampling (field 35
        in Netflow version 9), or zero if not available.

    uint16 NETFLOW_FLOW_ACTIVE_TIMEOUT() -- Timeout value for active flow
        entries in the router's cache, in seconds (field 36 in Netflow version
        9), or zero if not available.

    uint16 NETFLOW_FLOW_INACTIVE_TIMEOUT() -- Timeout value for inactive flow
        entries in the router's cache, in seconds (field 37 in Netflow version
        9), or zero if not available.

    uint8 NETFLOW_ENGINE_TYPE() -- Type of flow switching engine: RP = 0,
        VIP/Linecard = 1 (field 38 in Netflow version 9), or zero if not available.

    uint8 NETFLOW_ENGINE_ID() -- ID number of the flow switching engine (field
        39 in Netflow version 9), or zero if not available.

    uint64 NETFLOW_TOTAL_BYTES_EXP() -- Number of bytes exported by the
        Observation Domain (field 40 in Netflow version 9), or zero if not
        available.

    uint64 NETFLOW_TOTAL_PKTS_EXP() -- Number of packets exported by the
        Observation Domain (field 41 in Netflow version 9), or zero if not
        available.

    uint64 NETFLOW_TOTAL_FLOWS_EXP() -- Number of flows exported by the
        Observation Domain (field 42 in Netflow version 9), or zero if not
        available.

    uint32 NETFLOW_IPV4_SRC_PREFIX() -- IPv4 source address prefix, specific for
        Catalyst architecture (field 44 in Netflow version 9), or zero if not
        available.

    uint32 NETFLOW_IPV4_DST_PREFIX() -- IPv4 destination address prefix,
        specific for Catalyst architecture (field 45 in Netflow version 9), or
        zero if not available.

    uint8 NETFLOW_MPLS_TOP_LABEL_TYPE() -- MPLS top label type: 0x00 UNKNOWN,
        0x01 TE-MIDPT, 0x02 ATOM, 0x03 VPN, 0x04 BGP, 0x05 LDP (field 46 in
        Netflow version 9), or zero if not available.

    uint32 NETFLOW_MPLS_TOP_LABEL_IPV4_ADDR() -- Forwarding Equivalent Class
        corresponding to the MPLS top label (field 47 in Netflow version 9), or
        zero if not available.

    uint8 NETFLOW_FLOW_SAMPLER_ID() -- Identifier shown in "show flow-sampler"
        (field 48 in Netflow version 9), or zero if not available.

    uint8 NETFLOW_FLOW_SAMPLER_MODE() -- The type of algorithm used for sampling
        packets (field 49 in Netflow version 9), or zero if not available.

    uint32 NETFLOW_FLOW_SAMPLER_RANDOM_INTERVAL() -- Packet interval at which to
        sample packets (field 50 in Netflow version 9), or zero if not available.

    uint8 NETFLOW_MIN_TTL() -- Minimum TTL on incoming packets of the flow
        (field 52 in Netflow version 9), or zero if not available.

    uint8 NETFLOW_MAX_TTL() -- Maximum TTL on incoming packets of the flow
        (field 53 in Netflow version 9), or zero if not available.

    uint16 NETFLOW_IPV4_IDENT() -- The IPv4 identification field (field 54 in
        Netflow version 9), or zero if not available.

    uint8 NETFLOW_DST_TOS() -- IP 'type of service' of this flow, as detected by
        outgoing interface of router (field 55 in Netflow version 9), or zero if
        not available.

    list<uint8> NETFLOW_MAC_SRC_ADDR_IN() -- Incoming MAC source address (field
        56 in Netflow version 9), or an empty list if not available.

    list<uint8> NETFLOW_MAC_DST_ADDR_OUT() -- Outgoing MAC destination address
        (field 57 in Netflow version 9), or an empty list if not available.

    uint16 NETFLOW_SRC_VLAN() -- Virtual LAN identifier associated with incoming
        interface (field 58 in Netflow version 9), or zero if not available.

    uint16 NETFLOW_DST_VLAN() -- Virtual LAN identifier associated with outgoing
        interface (field 59 in Netflow version 9), or zero if not available.

    uint8 NETFLOW_IP_PROTOCOL_VERSION() -- IP version, one of '4' for IPv4, or
        '6' for IPv6 (field 60 in Netflow version 9), or zero if not available.

    uint8 NETFLOW_DIRECTION() -- Flow direction: 0 for ingress flow, 1 for
        egress flow (field 61 in Netflow version 9), or zero if not available.

    list<uint8> NETFLOW_IPV6_NEXT_HOP() -- IPv6 address of the next-hop router
        (field 62 in Netflow version 9), or an empty list if not available.

    list<uint8> NETFLOW_BPG_IPV6_NEXT_HOP() -- IPv6 address of Next-hop router
        in the BGP domain (field 63 in Netflow version 9), or an empty list if
        not available.

    uint32 NETFLOW_IPV6_OPTION_HEADERS() -- Bit-encoded field identifying IPv6
        option headers found in the flow (field 64 in Netflow version 9), or
        zero if not available.

    list<uint8> NETFLOW_MPLS_LABEL(int32 position) -- MPLS label at position 1
        to 10 in the stack, encoded as 20 bits of MPLS label, 3 experimental
        bits, and 1 end-of-stack bit (fields 70 to 79 in Netflow version 9), or
        an empty list if not available.

    list<uint8> NETFLOW_MAC_DST_ADDR_IN() -- Incoming MAC destination address
        (field 80 in Netflow version 9), or an empty list if not available.

    list<uint8> NETFLOW_MAC_SRC_ADDR_OUT() -- Outgoing MAC source address (field
        81 in Netflow version 9), or an empty list if not available.

    rstring NETFLOW_IF_NAME() -- Shortened interface name, for example, "FE1/0"
        (field 82 in Netflow version 9), or an empty string if not available.

    rstring NETFLOW_IF_DESC() -- Full interface name, for example, "FastEthernet
        1/0" (field 83 in Netflow version 9), or an empty string if not available.

    rstring NETFLOW_SAMPLER_NAME() -- Name of the flow sampler (field 84 in
        Netflow version 9), or an empty string if not available.

    uint64 NETFLOW_IN_PERMANENT_BYTES() -- Running byte counter for a permanent
        flow (field 85 in Netflow version 9), or zero if not available.

    uint64 NETFLOW_IN_PERMANENT_PKTS() -- Running packet counter for a permanent
        flow (field 86 in Netflow version 9), or zero if not available.

    uint16 NETFLOW_FRAGMENT_OFFSET() -- The fragment-offset value from
        fragmented IP packets (field 88 in Netflow version 9), or zero if not
        available.

    uint8 NETFLOW_FORWARDING_STATUS() -- Forwarding status, encoded 2 bits of
        status and 6 bits of reason code (field 89 in Netflow version 9), or
        zero if not available.

    list<uint8> NETFLOW_MPLS_PAL_RD() -- MPLS PAL Route Distinguisher (field 90
        in Netflow version 9), or an empty list if not available.

    uint8 NETFLOW_MPLS_PREFIX_LEN() -- Number of consecutive bits in the MPLS
        prefix length (field 91 in Netflow version 9), or zero if not available.

    uint32 NETFLOW_SRC_TRAFFIC_INDEX() -- BGP policy accounting source traffic
        index (field 92 in Netflow version 9), or zero if not available.

    uint32 NETFLOW_DST_TRAFFIC_INDEX() -- BGP policy accounting destination
        traffic index (field 93 in Netflow version 9), or zero if not available.

    rstring NETFLOW_APPLICATION_DESCRIPTION() -- Application description (field
        94 in Netflow version 9), or zero if not available.

    list<uint8> NETFLOW_APPLICATION_TAG() -- 8 bits of engine ID, followed by n
        bits of classification. (field 95 in Netflow version 9), or an empty list if
    not available.

    rstring NETFLOW_APPLICATION_NAME() -- Name associated with a classification
        (field 96 in Netflow version 9), or an empty string if not available.

    uint8 NETFLOW_POST_IP_DSCP() -- The value of a Differentiated Services Code
        Point (DSCP) (field 98 in Netflow version 9), or zero if not available.

    uint32 NETFLOW_REPLICATION_FACTOR() -- Multicast replication factor (field
        99 in Netflow version 9), or zero if not available.


_____Threads_____


The NetflowMessageParser runs on the thread of the upstream operator that sends
input tuples to it. It does not start any threads of its own.


_____Metrics_____


The NetflowMessageParser operator has no Streams metrics.


_____Exceptions_____


The NetflowMessageParser operator will throw an exception and terminate in these
situations:

   -- No output ports are specified.

   -- The 'outputFilters' parameter is specified, and the number of expressions
      specified does not match the number of output ports specified.


_____Examples_____


The SampleNetflowMessageParser project in this toolkit contains examples of this
operator.  The SampleNetworkToolkitData project in this toolkit contains data
for the sample applications.


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
