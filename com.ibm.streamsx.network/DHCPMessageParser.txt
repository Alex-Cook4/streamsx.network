Copyright (C) 2011, 2015  International Business Machines Corporation
All Rights Reserved



Network Toolkit: DHCPMessageParser operator
-------------------------------------------


_____Description_____


DHCPMessageParser is an operator for the IBM InfoSphere Streams product that that
parses individual fields of DHCP messages received in input tuples, and assigns
their values to specified output attributes.  Other output attributes are
implicitly copied from input attributes.

The DHCPMessageParser operator expects only DHCP messages in its input tuples,
without any of the headers that precede them in network packets.  The
PacketLiveSource and PacketFileSource operators can produce tuples that contain
DHCP messages, using their 'payloadData()' output attribute assignment functions.

The DHCPMessageParser operator parses fields in DHCP request and response
messages, and assigns their values to output attributes, as specified by output
attribute assignment functions.

DHCP messages and the fields they contain are described here:

    https://en.wikipedia.org/wiki/Dynamic_Host_Configuration_Protocol
    https://tools.ietf.org/html/rfc2131
    https://tools.ietf.org/html/rfc2132
    http://www.iana.org/assignments/bootp-dhcp-parameters/bootp-dhcp-parameters.xhtml

Each input tuple processed by the DHCPMessageParser operator may produce zero,
one, or more output tuples, depending upon how its filters and output ports are
configured. Malformed DHCP messages may produce incomplete output tuples. Parsing
errors are logged in the operator's PE log; applications can filter or label
malformed DHCP messages with output assignment functions.

This operator is part of the network toolkit. The toolkit includes several
sample applications that illustrate how to use the operator.


_____Input Ports_____


The DHCPMessageParser operator has one required input port with one required
attribute:

    One input attribute must be of type 'blob' and must contain a DHCP message,
    minus the network headers that proceed them in network packets, as specified
    by the required parameter 'messageAttribute'.

The 'payloadData' output assignment function of the PacketLiveSource and
PacketFileSource operators in the toolkit can be used to produce attributes that
can be consumed by the DHCPMessageParser operator.


_____Output Ports_____


The DHCPMessageParser operator has one or more output ports: 

  * Each output port may produce tuples containing DHCP message fields, as
    specified by output attribute assignments (see the Assignments section
    below). The tuples may optionally be filtered on output (see the
    'outputFilters' parameter below).

Each message processed by the operator may be emitted by each output port if
passed by the corresponding output filter, if one is specified, and may assign
different fields to different output attributes.

The DHCPMessageParser operator does not produce punctuation.


_____Parameters_____


   messageAttribute -- This required parameter specifies an input attribute of
      type 'blob' that contains a DHCP messages to be parsed by the operator.

   outputFilters -- This optional parameter takes a list of SPL expressions that
      specify which DHCP messages should be emitted by the corresponding output
      port. The number of expressions in the list must match the number of
      output ports, and each expression must evaluate to a boolean value.  The
      default value of the 'outputFilters' parameter is an empty list, which
      causes all DHCP messages processed to be emitted by all output ports.


_____Windowing_____


The DHCPMessageParser operator does not accept any window congfiguration.


_____Results____


The DHCPMessageParser operator provides the results of parsing input DHCP messages
through output functions that can be used in output attribute assignment functions,
and optionally in expressions in the 'outputFilters' parameter.

All attributes of all output ports must be assigned values, either with explicit
assignment expressions, or implicitly by copy from input tuples.

Output filters and attribute assignments are SPL expressions. They may use any
of the built-in SPL functions, and any of the following functions, which are
specific to this operator:

    boolean parseError -- This result function returns 'true' if an error was
        found while parsing the input DHCP message, or 'false' if no encoding
        errors were found.

    rstring parseErrorDescription -- This result function returns a short
        description of the first encoding error, if any were found, or an empty
        string no encoding errors were found.

    uint32 parseErrorOffset -- This result function returns the offset into the
        DHCP message of the first encoding error, if any were found, or zero if
        no encoding errors were found.

    uint64 messagesProcessed -- This result function returns the number of DHCP
        messages processed.

    uint8 DHCP_OPCODE() -- This result function returns the DHCP message type
        ('1' for request, '2' for reply).

    uint8 DHCP_CLIENT_HARDWARE_TYPE() -- This result function returns the
        client's hardware address type ('1' for ethernet).

    list<uint8> DHCP_CLIENT_HARDWARE_ADDRESS() -- This result function returns
        the MAC address of the client's ethernet adapter.

    uint8 DHCP_HOP_COUNT() -- This result function returns the number of relay
        agents separating the client and the DHCP server.

    uint32 DHCP_TRANSACTION_IDENTIFIER() -- This result function returns the
        request correlator chosen by the client and returned by the DHCP server.

    uint16 DHCP_SECONDS() -- This result function returns elapsed time, in
        seconds, since the client began this request.

    uint16 DHCP_FLAGS() -- This result function returns the DHCP message flags.

    uint32 DHCP_CLIENT_ADDRESS() -- This result function returns the IPv4
        address of the client requesting renewal of a lease.

    uint32 DHCP_YOUR_ADDRESS() -- This result function returns the IPv4 address
        leased to the client by the DHCP server, if the message is an
        acknowledgement granting a lease, or zero if not.

    uint32 DHCP_SERVER_NEXT() -- This result function returns the IPv4 address the next 
        DHCP server to use, if any, or zero if not.              ................?????????????? was DHCP_SERVER() ...................

    uint32 DHCP_RELAY_AGENT() -- This result function returns the IPv4 address
        of the relay agent between the client and DHCP server, if there is one,
        or zero if not.

    rstring DHCP_SERVER_HOSTNAME() -- This result function returns the name of
        the DHCP server, if available, or an empty string if not.

    rstring DHCP_BOOTFILE_NAME() -- This result function returns boot file
        pathname, if available, or an empty string if not.

    uint32 DHCP_SUBNET_MASK() -- This result function returns the mask of the
        client's subnet, represented as an IPv4 address, if DHCP option 1 is
        included in the message, or zero if not.

    int32 DHCP_TIME_OFFSET() -- This result function returns the time offset of
        the client's subnet, relative to GMT/UTC, in seconds, if DHCP option 2
        is included in the message, or zero if not.

    list<uint32> DHCP_ROUTERS() -- This result function returns a list of
        routers on client's subnet, represented as IPv4 addresses, if DHCP
        option 3 is included in the message, or an empty list if not.

    list<uint32> DHCP_TIME_SERVERS() -- This result function returns a list of
        time servers, represented as IPv4 addresses, if DHCP option 4 is
        included in the message, or an empty list if not.

    list<uint32> DHCP_NAME_SERVERS() -- This result function returns a list of
        name servers (not DNS servers, see next option), represented as IPv4
        addresses, if DHCP option 5 is included in the message, or an empty list if not.

    list<uint32> DHCP_DNS_SERVERS() -- This result function returns a list of
        DNS servers, represented as IPv4 addresses, if DHCP option 6 is included
        in the message, or an empty list if not.

    list<uint32> DHCP_LOG_SERVERS() -- This result function returns a list of
        log servers, represented as IPv4 addresses, if DHCP option 7 is included
        in the message, or an empty list if not.

    list<uint32> DHCP_COOKIE_SERVERS() -- This result function returns a list of
        cookie servers, represented as IPv4 addresses, if DHCP option 8 is
        included in the message, or an empty list if not.

    list<uint32> DHCP_LPR_SERVERS() -- This result function returns a list of
        print servers, represented as IPv4 addresses, if DHCP option 9 is
        included in the message, or an empty list if not.

    list<uint32> DHCP_IMPRESS_SERVERS() -- This result function returns a list
        of Impress servers, represented as IPv4 addresses, if DHCP option 10 is
        included in the message, or an empty list if not.

    list<uint32> DHCP_RESOURCE_SERVERS() -- This result function returns a list
        of resource location servers, represented as IPv4 addresses, if DHCP
        option 11 is included in the message, or an empty list if not.

    rstring DHCP_HOST_NAME() -- This result function returns the hostname of the
        client, if DHCP option 12 is included in the message, or an empty string if not.

    uint16 DHCP_BOOT_FILE_SIZE() -- This result function returns the size of
        boot file in 512 byte blocks, if DHCP option 13 is included in the
        message, or zero if not.

    rstring DHCP_MERIT_DUMP_FILE() -- This result function returns the pathname
        of a file for client's core dump image, if DHCP option 14 is included in
        the message, or an empty string if not.

    rstring DHCP_DOMAIN_NAME() -- This result function returns the domain name
        the client should use with DNS, if DHCP option 15 is included in the
        message, or an empty string if not.

    uint32 DHCP_SWAP_SERVER() -- This result function returns the IPv4 address
        of the client's swap server, if DHCP option 16 is included in the
        message.

    rstring DHCP_ROOT_PATH() -- This result function returns the pathname of the
        client's root disk (for diskless workstations), if DHCP option 17 is
        included in the message, or an empty string if not.

    rstring DHCP_EXTENSIONS_PATH() -- This result function returns BOOTP
        extensions, if DHCP option 18 is included in the message, or an empty
        string if not.

    boolean DHCP_IP_FORWARDING() -- This result function returns 'true' if the
        client should forward IP packets, if DHCP option 19 is included in the
        message, or false if not.

    boolean DHCP_NONLOCAL_SOURCE_ROUTING() -- This result function returns
        'true' if the client should forward IP packets with non-local source
        routing, if DHCP option 20 is included in the message, or false if not.

    list<uint32> DHCP_NONLOCAL_SOURCE_FILTERS() -- This result function returns
        a list of IPv4 address/mask pairs for filtering source packets, if DHCP
        option 21 is included in the message, or an empty list if not.

    uint16 DHCP_MAXIMUM_REASSEMBLY_SIZE() -- This result function returns the
        maximum size of reassembled packets, if DHCP option 22 is included in
        the message, or zero if not.

    uint8 DHCP_IP_DEFAULT_TTL() -- This result function returns the default IP
        time-to-live for outgoing packets, if DHCP option 23 is included in the
        message, or zero if not.

    uint32 DHCP_MTU_AGING_TIMEOUT() -- This result function returns the time to
        use when aging path MTU values, in seconds, if DHCP option 24 is
        included in the message, or zero if not.

    list<uint16> DHCP_MTU_PLATEAU_TABLE() -- This result function returns a list
        of MTU sizes for path discovery, if DHCP option 25 is included in the
        message, or an empty list if not.

    uint16 DHCP_INTERFACE_MTU() -- This result function returns the MTU size to
        use on this interface, if DHCP option 26 is included in the message, or
        zero if not.

    boolean DHCP_ALL_SUBNETS_LOCAL() -- This result function returns 'true' if
        all subnets use the same MTU size, if DHCP option 27 is included in the
        message, or false if not.

    uint32 DHCP_BROADCAST_ADDRESS() -- This result function returns the IPv4
        address to use when broadcasting on subnet, if DHCP option 28 is
        included in the message, or zero if not.

    boolean DHCP_PERFORM_MASK_DISCOVERY() -- This result function returns 'true'
        when client should perform subnet mask discovery, if DHCP option 29 is
        included in the message, or false if not.

    boolean DHCP_MASK_SUPPLIER() -- This result function returns 'true' when
        client should respond to subnet mask discovery, if DHCP option 30 is
        included in the message, or false if not.

    boolean DHCP_PERFORM_ROUTER_DISCOVERY() -- This result function returns
        'true' when the client should solicit routers, if DHCP option 31 is
        included in the message, or false if not.

    uint32 DHCP_ROUTER_SOLICITATION_ADDRESS() -- This result function returns
        the IPv4 address to which router solicitations should be sent, if DHCP
        option 32 is included in the message, or zero if not.

    list<uint32> DHCP_STATIC_ROUTES() -- This result function returns a list of
        IPv4 address pairs for the client's static routing table, if DHCP option
        33 is included in the message, or an empty list if not.

    boolean DHCP_TRAILER_ENCAPSULATION() -- This result function returns 'true'
        when the client should negotiate trailers, if DHCP option 34 is included
        in the message, or false if not.

    uint32 DHCP_ARP_CACHE_TIMEOUT() -- This result function returns the timeout
        for ARP cache entries, in seconds, if DHCP option 35 is included in the
        message, or zero if not.

    boolean DHCP_ETHERNET_ENCAPSULATION() -- This result function returns 'true'
        when the client should use ethernet encapsulation, if DHCP option 36 is
        included in the message, or false if not.

    uint8 DHCP_TCP_DEFUALT_TTL() -- This result function returns the default TCP
        time-to-live for outgoing segments, if DHCP option 37 is included in the
        message, or zero if not.

    uint32 DHCP_TCP_KEEPALIVE_INTERVAL() -- This result function returns the
        time the client should wait before sending TCP keepalive messages, in
        seconds, if DHCP option 38 is included in the message, or zero if not.

    boolean DHCP_TCP_KEEPALIVE_GARBAGE() -- This result function returns 'true'
        when the client should send a byte of garbage with TCP keepalive
        messages, if DHCP option 39 is included in the message, or false if not.

    rstring DHCP_NIS_DOMAIN() -- This result function returns the name of the
        client's NIS domain, if DHCP option 40 is included in the message, or an
        empty string if not.

    list<uint32> DHCP_NIS_SERVERS() -- This result function returns a list of
        NIS servers, represented as IPv4 addresses, if DHCP option 41 is
        included in the message, or an empty list if not.

    list<uint32> DHCP_NTP_SERVERS() -- This result function returns a list of
        NTP servers, represented as IPv4 addresses, if DHCP option 42 is
        included in the message, or an empty list if not.

    list<uint8> DHCP_VENDOR_INFORMATION() -- This result function returns
        vendor-specific information, if DHCP option 43 is included in the
        message, or an empty list if not.

    list<uint32> DHCP_NETBIOS_NAME_SERVERS() -- This result function returns a
        list of NetBIOS-over-TCP name servers, represented as IPv4 addresses, if
        DHCP option 44 is included in the message, or an empty list if not.

    list<uint32> DHCP_NETBIOS_NBDD_SERVERS() -- This result function returns a
        list of NetBIOS-over-TCP NBDD servers, represented as IPv4 addresses, if
        DHCP option 45 is included in the message, or an empty list if not.

    uint8 DHCP_NETBIOS_NODE_TYPE() -- This result function returns the type of
        NetBIOS-over-TCP node, if DHCP option 46 is included in the message, or
        zero if not.

    rstring DHCP_NETBIOS_SCOPE() -- This result function returns the client's
        NetBIOS-over-TCP scope parameter, if DHCP option 47 is included in the
        message, or an empty string if not.

    list<uint32> DHCP_XWINDOW_FONT_SERVERS() -- This result function returns a
        list of X-Windows font servers, represented as IPv4 addresses, if DHCP
        option 48 is included in the message, or an empty list if not.

    list<uint32> DHCP_XWINDOW_DISPLAY_MANAGERS() -- This result function returns
        a list of X-Windows display managers, represented as IPv4 addresses, if
        DHCP option 49 is included in the message, or an empty list if not.

    uint32 DHCP_REQUESTED_ADDRESS() -- This result function returns the client's
        requested address, as an IPv4 address, if DHCP option 50 is included in
        the message, or zero if not.

    uint32 DHCP_ADDRESS_LEASE_TIME() -- This result function returns the
        duration of the address lease, in seconds, if DHCP option 51 is included
        in the message, or zero if not.

    uint8 DHCP_MESSAGE_TYPE() -- This result function returns the type of this
        DHCP message, if DHCP option 53 is included in the message, or zero if
        not.

    uint32 DHCP_SERVER_ADDRESS() -- This result function returns the IPv4
        address of DHCP server, if DHCP option 54 is included in the message, or
        zero if not.

    list<uint8> DHCP_PARAMETER_REQUESTS() -- This result function returns a list
        of requested DHCP parameters, expressed as option codes, if DHCP option
        55 is included in the message, or an empty list if not.

    rstring DHCP_ERROR_MESSAGE() -- This result function returns an error
        message from server, if request failed, if DHCP option 56 is included in
        the message.

    uint16 DHCP_MAXIMUM_MESSAGE_SIZE() -- This result function returns the
        maximum size of DHCP message, if DHCP option 57 is included in the
        message, or zero if not.

    uint32 DHCP_RENEWAL_TIME() -- This result function returns then time from
        address lease to renewal, in seconds, if DHCP option 58 is included in
        the message, or zero if not.

    uint32 DHCP_REBINDING_TIME() -- This result function returns the time from
        address lease to rebinding, in seconds, if DHCP option 59 is included in
        the message, or zero if not.

    list<uint8> DHCP_VENDOR_IDENTIFIER() -- This result function returns
        vendor-specific information, if DHCP option 60 is included in the
        message, or an empty list if not.

    list<uint8> DHCP_CLIENT_IDENTIFIER() -- This result function returns
        client-specific information, if DHCP option 61 is included in the
        message, or an empty list if not.

    rstring DHCP_NISPLUS_DOMAIN() -- This result function returns the name of
        the client's NIS+ domain, if DHCP option 64 is included in the message.

    list<uint32> DHCP_NISPLUS_SERVERS() -- This result function returns a list
        of NIS+ servers, represented as IPv4 addresses, if DHCP option 65 is
        included in the message, or an empty list if not.

    list<uint32> DHCP_MOBILE_IP_HOME_AGENTS() -- This result function returns a
        list of mobile IP home agents, represented as IPv4 addresses, if DHCP
        option 68 is included in the message, or an empty list if not.

    list<uint32> DHCP_SMTP_SERVERS() -- This result function returns a list of
        SMTP servers, represented as IPv4 addresses, if DHCP option 69 is
        included in the message, or an empty list if not.

    list<uint32> DHCP_POP3_SERVERS() -- This result function returns a list of
        POP3 servers, represented as IPv4 addresses, if DHCP option 70 is
        included in the message, or an empty list if not.

    list<uint32> DHCP_NNTP_SERVERS() -- This result function returns a list of
        NNTP servers, represented as IPv4 addresses, if DHCP option 71 is
        included in the message, or an empty list if not.

    list<uint32> DHCP_WWW_SERVERS() -- This result function returns a list of
        WWW servers, represented as IPv4 addresses, if DHCP option 72 is
        included in the message, or an empty list if not.

    list<uint32> DHCP_FINGER_SERVERS() -- This result function returns a list of
        Finger servers, represented as IPv4 addresses, if DHCP option 73 is
        included in the message, or an empty list if not.

    list<uint32> DHCP_IRC_SERVERS() -- This result function returns a list of
        IRC servers, represented as IPv4 addresses, if DHCP option 74 is
        included in the message, or an empty list if not.

    list<uint32> DHCP_STREETTALK_SERVERS() -- This result function returns a
        list of StreetTalk servers, represented as IPv4 addresses, if DHCP
        option 75 is included in the message, or an empty list if not.

    list<uint32> DHCP_STDA_SERVERS() -- This result function returns a list of
        StreetTalk Directory Assistance servers, represented as IPv4 addresses,
        if DHCP option 76 is included in the message, or an empty list if not.


_____Threads_____


The DHCPMessageParser runs on the thread of the upstream operator that sends
input tuples to it. It does not start any threads of its own.


_____Metrics_____


The DHCPMessageParser operator has no Streams metrics.


_____Exceptions_____


The DHCPMessageParser operator will throw an exception and terminate in these
situations:

   -- No output ports are specified.

   -- The 'outputFilters' parameter is specified, and the number of expressions
      specified does not match the number of output ports specified.


_____Examples_____


The SampleDHCPMessageParser project in this toolkit contains examples of this
operator.  The SampleNetworkToolkitData project in this toolkit contains data
for the sample applications.


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
