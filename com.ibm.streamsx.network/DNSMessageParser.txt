Copyright (C) 2011, 2015  International Business Machines Corporation
All Rights Reserved



Network Toolkit: DNSMessageParser operator
------------------------------------------


_____Description_____


DNSMessageParser is an operator for the IBM InfoSphere Streams product that that
parses individual fields of DNS messages received in input tuples, and assigns
their values to specified output attributes.  Other output attributes are
implicitly copied from input attributes.

The DNSMessageParser operator expects only DNS messages in its input tuples,
without any of the headers that precede them in network packets.  The
PacketLiveSource and PacketFileSource operators can produce tuples that contain
DNS messages, using their 'payloadData()' output attribute assignment functions.

The DNSMessageParser operator parses fields in DNS request and response
messages, and assigns their values to output attributes, as specified by output
attribute assignment functions.

DNS messages and the fields they contain are described here:

    http://en.wikipedia.org/wiki/Domain_Name_System
    http://tools.ietf.org/html/rfc1035

Each input tuple processed by the DNSMessageParser operator may produce zero,
one, or more output tuples, depending upon how its filters and output ports are
configured. Malformed DNS messages may produce incomplete output tuples. Parsing
errors are logged in the operator's PE log; applications can filter or label
malformed DNS messages with output assignment functions.

The DNSMessageParser operator is part of the network toolkit. To use it in an
application, include this statement in the SPL source file:

    use com.ibm.streamsx.network.parse::*;

The network toolkit includes several sample applications that illustrate how to
use the operator.


_____Input Ports_____


The DNSMessageParser operator has one required input port with one required
attribute:

    One input attribute must be of type 'blob' and must contain a DNS message,
    minus the network headers that proceed them in network packets, as specified
    by the required parameter 'messageAttribute'.

The 'payloadData' output assignment function of the PacketLiveSource and
PacketFileSource operators in the toolkit can be used to produce attributes that
can be consumed by the DNSMessageParser operator.


_____Output Ports_____


The DNSMessageParser operator has one or more output ports: 

  * Each output port may produce tuples containing DNS message fields, as
    specified by output attribute assignments (see the Assignments section
    below). The tuples may optionally be filtered on output (see the
    'outputFilters' parameter below).

Each message processed by the operator may be emitted by each output port if
passed by the corresponding output filter, if one is specified, and may assign
different fields to different output attributes.

The DNSMessageParser operator does not produce punctuation.


_____Parameters_____


   messageAttribute -- This required parameter specifies an input attribute of
      type 'blob' that contains a DNS messages to be parsed by the operator.

   outputFilters -- This optional parameter takes a list of SPL expressions that
      specify which DNS messages should be emitted by the corresponding output
      port. The number of expressions in the list must match the number of
      output ports, and each expression must evaluate to a boolean value.  The
      default value of the 'outputFilters' parameter is an empty list, which
      causes all DNS messages processed to be emitted by all output ports.


_____Windowing_____


The DNSMessageParser operator does not accept any window congfiguration.


_____Results____


The DNSMessageParser operator provides the results of parsing input DNS messages
through output functions that can be used in output attribute assignment functions,
and optionally in expressions in the 'outputFilters' parameter.

All attributes of all output ports must be assigned values, either with explicit
assignment expressions, or implicitly by copy from input tuples.

Output filters and attribute assignments are SPL expressions. They may use any
of the built-in SPL functions, and any of the following functions, which are
specific to this operator:

    boolean parseError -- This result function returns 'true' if an error was
        found while parsing the input DNS message, or 'false' if no encoding
        errors were found.

    rstring parseErrorDescription -- This result function returns a short
        description of the first encoding error, if any were found, or an empty
        string no encoding errors were found.

    uint32 parseErrorOffset -- This result function returns the offset into the
        DNS message of the first encoding error, if any were found, or zero if
        no encoding errors were found.

    uint64 messagesProcessed -- This result function returns the number of DNS
        messages processed.

    uint16 DNS_IDENTIFIER -- This result function returns the value of the DNS
        'identifier' field.

    uint8 DNS_OPCODE -- This result function returns the value of the DNS
        'opcode' field.

    boolean DNS_RESPONSE_FLAG -- This result function returns 'false' if the DNS
        message is a request sent to a server, or 'true' if it is a response
        returned from a server.

    uint8 DNS_RESPONSE_CODE -- This result function returns the value of the DNS
        'response code' field.

    boolean DNS_AUTHORITATIVE_FLAG -- This result function returns 'true' if the
        DNS 'authoritative' flag is set, or 'false' if not.

    boolean DNS_TRUNCATION_FLAG -- This result function returns 'true' if the
        DNS 'truncation' flag is set, or 'false' if not.

    uint16 DNS_QUESTION_COUNT -- This result function returns the value of the
    DNS 'question count' field.

    rstring DNS_QUESTION_NAME -- This result function returns the value of the
        'name' field in the first 'question' resource record, if there is one,
        or an empty string if not.  If the DNS message does contain a 'question'
        resource record, but the name is encoded incorrecty, this function may
        return an empty or truncated string.  In this case, the 'parseError()'
        function will return 'true'.

    uint16 DNS_QUESTION_TYPE -- This result function returns the value of the
        DNS 'type' field from the first 'question' resource record, if there is
        one, or zero if not.

    uint16 DNS_QUESTION_CLASS -- This result function returns the value of the
        DNS 'class' field from the first 'question' resource record, if there is
        one, or zero if not.

    list<rstring> DNS_QUESTION_NAMES -- This result function returns the values
        all of the 'name' fields in the 'question' resource records, if there
        are any, or an empty list if not. If any of the names are encoded
        incorrectly, this function may return an empty or truncated list, and
        some or all of the names may be empty or truncated. In this case, the
        'parseError()' function will return 'true'.

    list<uint16> DNS_QUESTION_TYPES -- This result function returns the values
        all of the 'type' fields in the 'question' resource records, if there
        are any, or an empty list if not.

    list<uint16> DNS_QUESTION_CLASSES -- This result function returns the values
        all of the 'class' fields in the 'question' resource records, if there
        are any, or an empty list if not.

    uint16 DNS_ANSWER_COUNT -- This result function returns the value of the DNS
        'anwser count' field.

    list<rstring> DNS_ANSWER_NAMES -- This result function returns the values
        all of the 'name' fields in the 'answer' resource records, if there are
        any, or an empty list if not. If any of the names are encoded
        incorrectly, this function may return an empty or truncated list, and
        some or all of the names may be empty or truncated. In this case, the
        'parseError()' function will return 'true'.

    list<uint16> DNS_ANSWER_TYPES -- This result function returns the values all
        of the 'type' fields in the 'answer' resource records, if there are any,
        or an empty list if not.

    list<uint16> DNS_ANSWER_CLASSES -- This result function returns the values
        all of the 'class' fields in the 'answer' resource records, if there are
        any, or an empty list if not.

    list<uint32> DNS_ANSWER_TTLS -- This result function returns the values all
        of the 'ttl' fields in the 'answer' resource records, if there are any,
        or an empty list if not.

    list<rstring> DNS_ANSWER_DATA -- This result function returns the values all
        of the 'data' fields in the 'answer' resource records, if there are
        any, or an empty list if not.

    rstring DNS_ANSWER_CANONICAL -- This result function returns the value of
        the 'data' field in the first 'answer' resource record of type 5 (that
        is, of type 'CNAME', meaning 'canonical name'), if there is one, or an
        empty string if not.

    rstring DNS_ANSWER_ADDRESS -- This result function returns the value of the
        'data' field in the first 'answer' resource record of type 1 or 28 (that
        is, of type 'A' or 'AAAA' respectively, meaning an IPv4 or IPv6
        addresss), if there is one, or an empty string if not.

    list<rstring> DNS_ANSWER_ADDRESSES -- This result function returns the
        values all of the 'data' fields in the 'answer' resource records of type
        1 or 28 (that is, of type 'A' or 'AAAA' respectively, meaning an IPv4 or
        IPv6 addresss), if there are any, or an empty list if not.

    uint16 DNS_NAMESERVER_COUNT -- This result function returns the value of the
        DNS 'name server count' field.

    list<rstring> DNS_NAMESERVER_NAMES -- This result function returns the values
        all of the 'name' fields in the 'name server' resource records, if there are
        any, or an empty list if not. If any of the names are encoded
        incorrectly, this function may return an empty or truncated list, and
        some or all of the names may be empty or truncated. In this case, the
        'parseError()' function will return 'true'.

    list<uint16> DNS_NAMESERVER_TYPES -- This result function returns the values all
        of the 'type' fields in the 'name server' resource records, if there are any,
        or an empty list if not.

    list<uint16> DNS_NAMESERVER_CLASSES -- This result function returns the values
        all of the 'class' fields in the 'name server' resource records, if there are
        any, or an empty list if not.

    list<uint32> DNS_NAMESERVER_TTLS -- This result function returns the values all
        of the 'ttl' fields in the 'name server' resource records, if there are any,
        or an empty list if not.

    list<rstring> DNS_NAMESERVER_DATA -- This result function returns the values all
        of the 'data' fields in the 'name server' resource records, if there are
        any, or an empty list if not.

    uint16 DNS_ADDITIONAL_COUNT -- This result function returns the value of the
        DNS 'additional count' field.

    list<rstring> DNS_ADDITIONAL_NAMES -- This result function returns the values
        all of the 'name' fields in the 'additional' resource records, if there are
        any, or an empty list if not. If any of the names are encoded
        incorrectly, this function may return an empty or truncated list, and
        some or all of the names may be empty or truncated. In this case, the
        'parseError()' function will return 'true'.

    list<uint16> DNS_ADDITIONAL_TYPES -- This result function returns the values all
        of the 'type' fields in the 'additional' resource records, if there are any,
        or an empty list if not.

    list<uint16> DNS_ADDITIONAL_CLASSES -- This result function returns the values
        all of the 'class' fields in the 'additional' resource records, if there are
        any, or an empty list if not.

    list<uint32> DNS_ADDITIONAL_TTLS -- This result function returns the values all
        of the 'ttl' fields in the 'additional' resource records, if there are any,
        or an empty list if not.

    list<rstring> DNS_ADDITIONAL_DATA -- This result function returns the values all
        of the 'data' fields in the 'additional' resource records, if there are
        any, or an empty list if not.


_____Threads_____


The DNSMessageParser runs on the thread of the upstream operator that sends
input tuples to it. It does not start any threads of its own.


_____Metrics_____


The DNSMessageParser operator has no Streams metrics.


_____Exceptions_____


The DNSMessageParser operator will throw an exception and terminate in these
situations:

   -- No output ports are specified.

   -- The 'outputFilters' parameter is specified, and the number of expressions
      specified does not match the number of output ports specified.


_____Examples_____


The SampleDNSMessageParser project in this toolkit contains examples of this
operator.  The SampleNetworkToolkitData project in this toolkit contains data
for the sample applications.


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
