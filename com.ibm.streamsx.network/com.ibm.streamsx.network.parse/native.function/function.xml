<?xml version="1.0" encoding="ASCII"?>
<function:functionModel xmlns:function="http://www.ibm.com/xmlns/prod/streams/spl/function">

  <function:functionSet>
    <function:headerFileName></function:headerFileName>
    <function:cppNamespaceName>common_result_functions</function:cppNamespaceName>
    <function:functions>

      <function:function>
        <function:description>

This parser result function returns `true` if an encoding error was detected while decoding the current packet,
or `false` otherwise. Note that a value of `false` does not necessarily mean the packet has
no encoding errors, since the operator only decodes the fields needed.

        </function:description>
        <function:prototype>public boolean parseError()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns a description of an encoding error found while decoding the current packet,
or an empty string if no enoding errors were found.

            </function:description>
        <function:prototype>public rstring parseErrorDescription()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the offset from the beginning of the message to the encoding error found,
or zero if no encoding errors were found.

            </function:description>
        <function:prototype>public uint32 parseErrorOffset()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the number of messages processed by the operator since it started,
including the current message.

            </function:description>
        <function:prototype>public uint64 messagesProcessed()</function:prototype>
      </function:function>

    </function:functions>
  </function:functionSet>

  <function:functionSet>
    <function:headerFileName></function:headerFileName>
    <function:cppNamespaceName>DHCPMessageParser_result_functions</function:cppNamespaceName>
    <function:functions>

      <function:function>
        <function:description>

This parser result function returns the DHCP message type
('1' for request, '2' for reply).

            </function:description>
        <function:prototype>public uint8 DHCP_OPCODE()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the
client's hardware address type, for example, '1' for ethernet.

            </function:description>
        <function:prototype>public uint8 DHCP_CLIENT_HARDWARE_TYPE()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the DHCP client's network hardware address, for example, the MAC address
of its ethernet adapter.

            </function:description>
        <function:prototype>public list&lt;uint8> DHCP_CLIENT_HARDWARE_ADDRESS()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the number of relay agents separating the DHCP client and server.

            </function:description>
        <function:prototype>public uint8 DHCP_HOP_COUNT()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the request correlator chosen by the DHCP client in its request and returned to it by server in its response.

            </function:description>
        <function:prototype>public uint32 DHCP_TRANSACTION_IDENTIFIER()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the elased time, in seconds, between the request and the response.

            </function:description>
        <function:prototype>public uint16 DHCP_SECONDS()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the DHCP broadcast flag.

            </function:description>
        <function:prototype>public uint16 DHCP_FLAGS()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the DHCP client's IP version 4 address when it requests renewal of its lease.

            </function:description>
        <function:prototype>public uint32 DHCP_CLIENT_ADDRESS()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the IP version 4 address
leased to the client by the DHCP server, if the message is an
acknowledgement granting a lease, or zero if not.

            </function:description>
        <function:prototype>public uint32 DHCP_YOUR_ADDRESS()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the IP version 4 address of the next DHCP server to use.

            </function:description>
        <function:prototype>public uint32 DHCP_SERVER_NEXT()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the IP version 4 address of the relay agent between the DHCP client and server,
if there is one, or zero otherwise.

            </function:description>
        <function:prototype>public uint32 DHCP_RELAY_AGENT()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the name of the DHCP server, if it has one, or an empty string otherwise. This may be DHCP option 66, depending upon option 52.

            </function:description>
        <function:prototype>public rstring DHCP_SERVER_HOSTNAME()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the pathname of a boot file the client can use, if there is one, or an empty string otherwise. This may be DHCP option 67, depending upon option 52.

            </function:description>
        <function:prototype>public rstring DHCP_BOOTFILE_NAME()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the mask of the
client's subnet, represented as an IP version 4 address, if DHCP option 1 is
included in the message, or zero if not.

            </function:description>
        <function:prototype>public uint32 DHCP_SUBNET_MASK()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the time offset of
the client's subnet, relative to GMT/UTC, in seconds, if DHCP option 2
is included in the message, or zero if not.

            </function:description>
        <function:prototype>public int32 DHCP_TIME_OFFSET()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns a list of
routers on client's subnet, represented as IP version 4 addresses, if DHCP
option 3 is included in the message, or an empty list if not.

            </function:description>
        <function:prototype>public list&lt;uint32> DHCP_ROUTERS()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns a list of
time servers, represented as IP version 4 addresses, if DHCP option 4 is
included in the message, or an empty list if not.

            </function:description>
        <function:prototype>public list&lt;uint32> DHCP_TIME_SERVERS()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns a list of
name servers (not DNS servers, see next option), represented as IP version 4
addresses, if DHCP option 5 is included in the message, or an empty list if not.

            </function:description>
        <function:prototype>public list&lt;uint32> DHCP_NAME_SERVERS()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns a list of
DNS servers, represented as IP version 4 addresses, if DHCP option 6 is included
in the message, or an empty list if not.

            </function:description>
        <function:prototype>public list&lt;uint32> DHCP_DNS_SERVERS()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns a list of
log servers, represented as IP version 4 addresses, if DHCP option 7 is included
in the message, or an empty list if not.

            </function:description>
        <function:prototype>public list&lt;uint32> DHCP_LOG_SERVERS()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns a list of
cookie servers, represented as IP version 4 addresses, if DHCP option 8 is
included in the message, or an empty list if not.

            </function:description>
        <function:prototype>public list&lt;uint32> DHCP_COOKIE_SERVERS()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns a list of
print servers, represented as IP version 4 addresses, if DHCP option 9 is
included in the message, or an empty list if not.

            </function:description>
        <function:prototype>public list&lt;uint32> DHCP_LPR_SERVERS()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns a list
of Impress servers, represented as IP version 4 addresses, if DHCP option 10 is
included in the message, or an empty list if not.

            </function:description>
        <function:prototype>public list&lt;uint32> DHCP_IMPRESS_SERVERS()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns a list
of resource location servers, represented as IP version 4 addresses, if DHCP
option 11 is included in the message, or an empty list if not.

            </function:description>
        <function:prototype>public list&lt;uint32> DHCP_RESOURCE_SERVERS()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the hostname of the
client, if DHCP option 12 is included in the message, or an empty string if not.

            </function:description>
        <function:prototype>public rstring DHCP_HOST_NAME()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the size of
boot file in 512 byte blocks, if DHCP option 13 is included in the
message, or zero if not.

            </function:description>
        <function:prototype>public uint16 DHCP_BOOT_FILE_SIZE()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the pathname
of a file for client's core dump image, if DHCP option 14 is included in
the message, or an empty string if not.

            </function:description>
        <function:prototype>public rstring DHCP_MERIT_DUMP_FILE()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the domain name
the client should use with DNS, if DHCP option 15 is included in the
message, or an empty string if not.

            </function:description>
        <function:prototype>public rstring DHCP_DOMAIN_NAME()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the IP version 4 address
of the client's swap server, if DHCP option 16 is included in the
message.

            </function:description>
        <function:prototype>public uint32 DHCP_SWAP_SERVER()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the pathname of the
client's root disk (for diskless workstations), if DHCP option 17 is
included in the message, or an empty string if not.

            </function:description>
        <function:prototype>public rstring DHCP_ROOT_PATH()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns BOOTP
extensions, if DHCP option 18 is included in the message, or an empty
string if not.

            </function:description>
        <function:prototype>public rstring DHCP_EXTENSIONS_PATH()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns `true` if the
client should forward IP packets, if DHCP option 19 is included in the
message, or `false` if not.

            </function:description>
        <function:prototype>public boolean DHCP_IP_FORWARDING()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns
`true` if the client should forward IP packets with non-local source
routing, if DHCP option 20 is included in the message, or `false` if not.

            </function:description>
        <function:prototype>public boolean DHCP_NONLOCAL_SOURCE_ROUTING()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns
a list of IP version 4 address/mask pairs for filtering source packets, if DHCP
option 21 is included in the message, or an empty list if not.

            </function:description>
        <function:prototype>public list&lt;uint32> DHCP_NONLOCAL_SOURCE_FILTERS()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the
maximum size of reassembled packets, if DHCP option 22 is included in
the message, or zero if not.

            </function:description>
        <function:prototype>public uint16 DHCP_MAXIMUM_REASSEMBLY_SIZE()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the default IP
time-to-live for outgoing packets, if DHCP option 23 is included in the
message, or zero if not.

            </function:description>
        <function:prototype>public uint8 DHCP_IP_DEFAULT_TTL()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the time to
use when aging path MTU values, in seconds, if DHCP option 24 is
included in the message, or zero if not.

            </function:description>
        <function:prototype>public uint32 DHCP_MTU_AGING_TIMEOUT()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns a list
of MTU sizes for path discovery, if DHCP option 25 is included in the
message, or an empty list if not.

            </function:description>
        <function:prototype>public list&lt;uint16> DHCP_MTU_PLATEAU_TABLE()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the MTU size to
use on this interface, if DHCP option 26 is included in the message, or
zero if not.

            </function:description>
        <function:prototype>public uint16 DHCP_INTERFACE_MTU()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns `true` if
all subnets use the same MTU size, if DHCP option 27 is included in the
message, or `false` if not.

            </function:description>
        <function:prototype>public boolean DHCP_ALL_SUBNETS_LOCAL()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the IP version 4
address to use when broadcasting on subnet, if DHCP option 28 is
included in the message, or zero if not.

            </function:description>
        <function:prototype>public uint32 DHCP_BROADCAST_ADDRESS()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns `true`
when client should perform subnet mask discovery, if DHCP option 29 is
included in the message, or `false` if not.

            </function:description>
        <function:prototype>public boolean DHCP_PERFORM_MASK_DISCOVERY()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns `true` when
client should respond to subnet mask discovery, if DHCP option 30 is
included in the message, or `false` if not.

            </function:description>
        <function:prototype>public boolean DHCP_MASK_SUPPLIER()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns
`true` when the client should solicit routers, if DHCP option 31 is
included in the message, or `false` if not.

            </function:description>
        <function:prototype>public boolean DHCP_PERFORM_ROUTER_DISCOVERY()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns
the IP version 4 address to which router solicitations should be sent, if DHCP
option 32 is included in the message, or zero if not.

            </function:description>
        <function:prototype>public uint32 DHCP_ROUTER_SOLICITATION_ADDRESS()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns a list of
IP version 4 address pairs for the client's static routing table, if DHCP option
33 is included in the message, or an empty list if not.

            </function:description>
        <function:prototype>public list&lt;uint32> DHCP_STATIC_ROUTES()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns `true`
when the client should negotiate trailers, if DHCP option 34 is included
in the message, or `false` if not.

            </function:description>
        <function:prototype>public boolean DHCP_TRAILER_ENCAPSULATION()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the timeout
for ARP cache entries, in seconds, if DHCP option 35 is included in the
message, or zero if not.

            </function:description>
        <function:prototype>public uint32 DHCP_ARP_CACHE_TIMEOUT()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns `true`
when the client should use ethernet encapsulation, if DHCP option 36 is
included in the message, or `false` if not.

            </function:description>
        <function:prototype>public boolean DHCP_ETHERNET_ENCAPSULATION()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the default TCP
time-to-live for outgoing segments, if DHCP option 37 is included in the
message, or zero if not.

            </function:description>
        <function:prototype>public uint8 DHCP_TCP_DEFUALT_TTL()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the
time the client should wait before sending TCP keepalive messages, in
seconds, if DHCP option 38 is included in the message, or zero if not.          

            </function:description>
        <function:prototype>public uint32 DHCP_TCP_KEEPALIVE_INTERVAL()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns `true`
when the client should send a byte of garbage with TCP keepalive
messages, if DHCP option 39 is included in the message, or `false` if not.

            </function:description>
        <function:prototype>public boolean DHCP_TCP_KEEPALIVE_GARBAGE()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the name of the
client's NIS domain, if DHCP option 40 is included in the message, or an
empty string if not.

            </function:description>
        <function:prototype>public rstring DHCP_NIS_DOMAIN()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns a list of
NIS servers, represented as IP version 4 addresses, if DHCP option 41 is
included in the message, or an empty list if not.

            </function:description>
        <function:prototype>public list&lt;uint32> DHCP_NIS_SERVERS()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns a list of
NTP servers, represented as IP version 4 addresses, if DHCP option 42 is
included in the message, or an empty list if not.

            </function:description>
        <function:prototype>public list&lt;uint32> DHCP_NTP_SERVERS()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns
vendor-specific information, if DHCP option 43 is included in the
message, or an empty list if not.

            </function:description>
        <function:prototype>public list&lt;uint8> DHCP_VENDOR_INFORMATION()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns a
list of NetBIOS-over-TCP name servers, represented as IP version 4 addresses, if
DHCP option 44 is included in the message, or an empty list if not.

            </function:description>
        <function:prototype>public list&lt;uint32> DHCP_NETBIOS_NAME_SERVERS()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns a
list of NetBIOS-over-TCP NBDD servers, represented as IP version 4 addresses, if
DHCP option 45 is included in the message, or an empty list if not.

            </function:description>
        <function:prototype>public list&lt;uint32> DHCP_NETBIOS_NBDD_SERVERS()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the type of
NetBIOS-over-TCP node, if DHCP option 46 is included in the message, or
zero if not.

            </function:description>
        <function:prototype>public uint8 DHCP_NETBIOS_NODE_TYPE()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the client's
NetBIOS-over-TCP scope parameter, if DHCP option 47 is included in the
message, or an empty string if not.

            </function:description>
        <function:prototype>public rstring DHCP_NETBIOS_SCOPE()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns a
list of X-Windows font servers, represented as IP version 4 addresses, if DHCP
option 48 is included in the message, or an empty list if not.

            </function:description>
        <function:prototype>public list&lt;uint32> DHCP_XWINDOW_FONT_SERVERS()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns
a list of X-Windows display managers, represented as IP version 4 addresses, if
DHCP option 49 is included in the message, or an empty list if not.

            </function:description>
        <function:prototype>public list&lt;uint32> DHCP_XWINDOW_DISPLAY_MANAGERS()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the client's
requested address, as an IP version 4 address, if DHCP option 50 is included in
the message, or zero if not.

            </function:description>
        <function:prototype>public uint32 DHCP_REQUESTED_ADDRESS()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the
duration of the address lease, in seconds, if DHCP option 51 is included
in the message, or zero if not.

            </function:description>
        <function:prototype>public uint32 DHCP_ADDRESS_LEASE_TIME()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns flags indicating whether the `sname` and `file` fields
in the DHCP message header contain the server's host name and client's boot file name,
or additional DHCP options, if DHCP option 52 is included in the message, or zero if not.

        </function:description>
        <function:prototype>public uint8 DHCP_OPTION_OVERLOAD_FLAGS()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the type of this DHCP message, if DHCP option 53 is included in the message, or zero if
not, for example:

* '1' for Discover, 
* '2' for Offer, 
* '3' for Request, 
* '4' for Decline, 
* '5' for Positive Acknowledge, 
* '6' for Negative Acknowledge, 
* '7' for Release, or
* '8' for Inform.

            </function:description>
        <function:prototype>public uint8 DHCP_MESSAGE_TYPE()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the IP version 4
address of DHCP server, if DHCP option 54 is included in the message, or
zero if not.

            </function:description>
        <function:prototype>public uint32 DHCP_SERVER_ADDRESS()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns a list
of requested DHCP parameters, expressed as option codes, if DHCP option
55 is included in the message, or an empty list if not.

            </function:description>
        <function:prototype>public list&lt;uint8> DHCP_PARAMETER_REQUESTS()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns an error
message from server, if request failed, if DHCP option 56 is included in
the message.

            </function:description>
        <function:prototype>public rstring DHCP_ERROR_MESSAGE()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the
maximum size of DHCP message, if DHCP option 57 is included in the
message, or zero if not.

            </function:description>
        <function:prototype>public uint16 DHCP_MAXIMUM_MESSAGE_SIZE()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns then time from
address lease to renewal, in seconds, if DHCP option 58 is included in
the message, or zero if not.

            </function:description>
        <function:prototype>public uint32 DHCP_RENEWAL_TIME()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the time from
address lease to rebinding, in seconds, if DHCP option 59 is included in
the message, or zero if not.

            </function:description>
        <function:prototype>public uint32 DHCP_REBINDING_TIME()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns
vendor-specific information, if DHCP option 60 is included in the
message, or an empty list if not.

            </function:description>
        <function:prototype>public list&lt;uint8> DHCP_VENDOR_IDENTIFIER()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns
client-specific information, if DHCP option 61 is included in the
message, or an empty list if not.

            </function:description>
        <function:prototype>public list&lt;uint8> DHCP_CLIENT_IDENTIFIER()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the name of
the client's NIS+ domain, if DHCP option 64 is included in the message.

            </function:description>
        <function:prototype>public rstring DHCP_NISPLUS_DOMAIN()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns a list
of NIS+ servers, represented as IP version 4 addresses, if DHCP option 65 is
included in the message, or an empty list if not.

            </function:description>
        <function:prototype>public list&lt;uint32> DHCP_NISPLUS_SERVERS()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns a
list of mobile IP home agents, represented as IP version 4 addresses, if DHCP
option 68 is included in the message, or an empty list if not.

            </function:description>
        <function:prototype>public list&lt;uint32> DHCP_MOBILE_IP_HOME_AGENTS()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns a list of
SMTP servers, represented as IP version 4 addresses, if DHCP option 69 is
included in the message, or an empty list if not.

            </function:description>
        <function:prototype>public list&lt;uint32> DHCP_SMTP_SERVERS()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns a list of
POP3 servers, represented as IP version 4 addresses, if DHCP option 70 is
included in the message, or an empty list if not.

            </function:description>
        <function:prototype>public list&lt;uint32> DHCP_POP3_SERVERS()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns a list of
NNTP servers, represented as IP version 4 addresses, if DHCP option 71 is
included in the message, or an empty list if not.

            </function:description>
        <function:prototype>public list&lt;uint32> DHCP_NNTP_SERVERS()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns a list of
WWW servers, represented as IP version 4 addresses, if DHCP option 72 is
included in the message, or an empty list if not.

            </function:description>
        <function:prototype>public list&lt;uint32> DHCP_WWW_SERVERS()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns a list of
Finger servers, represented as IP version 4 addresses, if DHCP option 73 is
included in the message, or an empty list if not.

            </function:description>
        <function:prototype>public list&lt;uint32> DHCP_FINGER_SERVERS()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns a list of
IRC servers, represented as IP version 4 addresses, if DHCP option 74 is
included in the message, or an empty list if not.

            </function:description>
        <function:prototype>public list&lt;uint32> DHCP_IRC_SERVERS()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns a
list of StreetTalk servers, represented as IP version 4 addresses, if DHCP
option 75 is included in the message, or an empty list if not.

            </function:description>
        <function:prototype>public list&lt;uint32> DHCP_STREETTALK_SERVERS()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns a list of
StreetTalk Directory Assistance servers, represented as IP version 4 addresses,
if DHCP option 76 is included in the message, or an empty list if not.

            </function:description>
        <function:prototype>public list&lt;uint32> DHCP_STDA_SERVERS()</function:prototype>
      </function:function>

    </function:functions>
  </function:functionSet>

  <function:functionSet>
    <function:headerFileName></function:headerFileName>
    <function:cppNamespaceName>DNSMessageParser_result_functions</function:cppNamespaceName>
    <function:functions>

      <function:function>
        <function:description>

This parser result function returns the DNS client's request correlator in the current message, and returned by the server in its response.

            </function:description>
        <function:prototype>public uint16 DNS_IDENTIFIER()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the operation code requested by the DNS client in the current message, for example,

* '1' for standard queries, 
* '2' for inverse queries, or
* '3' for server status requests.

            </function:description>
        <function:prototype>public uint8 DNS_OPCODE()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the response code from the DNS server in the current message, for example,

* '0' for OK, 
* '1' for Format Error, 
* '2' for Server Failure, 
* '3' for Name Error, 
* '4' for not implemented, or
* '5' for Server Refused.

            </function:description>
        <function:prototype>public uint8 DNS_RESPONSE_CODE()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns `true` if the current message is a response sent by a DNS server,
or `false` if it is a request sent by a DNS client.

            </function:description>
        <function:prototype>public boolean DNS_RESPONSE_FLAG()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns `true` if the 'authoritative' flag is set in the current message, 
or `false` if not.

            </function:description>
        <function:prototype>public boolean DNS_AUTHORITATIVE_FLAG()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns `true` if the 'truncation' flag is set in the current message, 
or `false` if not.

            </function:description>
        <function:prototype>public boolean DNS_TRUNCATION_FLAG()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the number of 'question' resource records in the current message.

            </function:description>
        <function:prototype>public uint16 DNS_QUESTION_COUNT()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the 'name' field of the first 'question' resource record in the current message,
if there is one, or an empty string if not.
Note that if the DNS message does contain a 'question'
resource record, and the name is encoded incorrecty, this function may
return an empty or truncated string.  In this case, the `parseError()`
function will return `true`.

            </function:description>
        <function:prototype>public rstring DNS_QUESTION_NAME()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns a list of the 'name' fields in the 'question' resource records in the current message.
Note that if any of the names are encoded
incorrectly, this function may return an empty or truncated list, and
some or all of the names may be empty or truncated. In this case, the
`parseError()` function will return `true`.

            </function:description>
        <function:prototype>public list&lt;rstring> DNS_QUESTION_NAMES()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the 'type' field of the first 'question' resource record in the current message,
for example:

* '1' for IP version 4 address to domain name lookup ('A' records),
* '5' for domain name to canonical domain name lookup ('CNAME' records),
* '12' for domain name to IP address lookup ('TXT' records), or
* '28' for IP version 6 address to domain name lookup ('AAAA' records).

            </function:description>
        <function:prototype>public uint16 DNS_QUESTION_TYPE()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns a list of the 'type' fields in the 'question' resource records in the current message.

            </function:description>
        <function:prototype>public list&lt;uint16> DNS_QUESTION_TYPES()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the 'class' field of the first 'question' resource record in the current message,
for example, '1' for Internet adddresses ('IN' records),

            </function:description>
        <function:prototype>public uint16 DNS_QUESTION_CLASS()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns a list of the 'class' fields in the 'question' resource records in the current message.

            </function:description>
        <function:prototype>public list&lt;uint16> DNS_QUESTION_CLASSES()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the number of 'answer' resource records in the current message.

            </function:description>
        <function:prototype>public uint16 DNS_ANSWER_COUNT()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns a list of the 'name' fields in the 'answer' resource records in the current message.
Note that if any of the names are encoded
incorrectly, this function may return an empty or truncated list, and
some or all of the names may be empty or truncated. In this case, the
`parseError()` function will return `true`.

            </function:description>
        <function:prototype>public list&lt;rstring> DNS_ANSWER_NAMES()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns a list of the 'type' fields in the 'answer' resource records in the current message.

            </function:description>
        <function:prototype>public list&lt;uint16> DNS_ANSWER_TYPES()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns a list of the 'class' fields in the 'answer' resource records in the current message.

            </function:description>
        <function:prototype>public list&lt;uint16> DNS_ANSWER_CLASSES()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns a list of the 'time to live' fields in the 'answer' resource records in the current message.

            </function:description>
        <function:prototype>public list&lt;uint32> DNS_ANSWER_TTLS()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns a list of the 'data' fields in the 'answer' resource records in the current message.

            </function:description>
        <function:prototype>public list&lt;rstring> DNS_ANSWER_DATA()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the 'data' field of the first 'answer' resource record 
with a 'type' value of '5' (meaning, the answer is a canonical domain name from a type 'CNAME' record),
if there is one,
or an empty string if not.

            </function:description>
        <function:prototype>public rstring DNS_ANSWER_CANONICAL()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the 'data' field of the first 'answer' resource record
with a 'type' value of '1' (meaning, the answer is an IP version 4 address from a type 'A' record)
or '28' (meaning, the answer is an IP version 6 address from a type 'AAAA' record),
if there is one,
or an empty string if not.

            </function:description>
        <function:prototype>public rstring DNS_ANSWER_ADDRESS()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns a list of the 'data' fields in the 'answer' resource records that have a 'type' value of 
'1' or '28' (meaning, those answers are IP addresses from type 'A' or 'AAAA' records).

            </function:description>
        <function:prototype>public list&lt;rstring> DNS_ANSWER_ADDRESSES()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the number of 'name server' resource records in the current message.

            </function:description>
        <function:prototype>public uint16 DNS_NAMESERVER_COUNT()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns a list of the 'name' fields in the 'name server' resource records in the current message.
Note that if any of the names are encoded
incorrectly, this function may return an empty or truncated list, and
some or all of the names may be empty or truncated. In this case, the
`parseError()` function will return `true`.

            </function:description>
        <function:prototype>public list&lt;rstring> DNS_NAMESERVER_NAMES()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns a list of the 'type' fields in the 'name server' resource records in the current message.

            </function:description>
        <function:prototype>public list&lt;uint16> DNS_NAMESERVER_TYPES()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns a list of the 'class' fields in the 'name server' resource records in the current message.

            </function:description>
        <function:prototype>public list&lt;uint16> DNS_NAMESERVER_CLASSES()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns a list of the 'time to live' fields in the 'name server' resource records in the current message.

            </function:description>
        <function:prototype>public list&lt;uint32> DNS_NAMESERVER_TTLS()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns a list of the 'data' fields in the 'name server' resource records in the current message.

            </function:description>
        <function:prototype>public list&lt;rstring> DNS_NAMESERVER_DATA()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the number of 'additional' resource records in the current message.

            </function:description>
        <function:prototype>public uint16 DNS_ADDITIONAL_COUNT()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns a list of the 'name' fields in the 'additional' resource records in the current message.
Note that if any of the names are encoded
incorrectly, this function may return an empty or truncated list, and
some or all of the names may be empty or truncated. In this case, the
`parseError()` function will return `true`.

            </function:description>
        <function:prototype>public list&lt;rstring> DNS_ADDITIONAL_NAMES()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns a list of the 'type' fields in the 'name server' resource records in the current message.

            </function:description>
        <function:prototype>public list&lt;uint16> DNS_ADDITIONAL_TYPES()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns a list of the 'class' fields in the 'name server' resource records in the current message.

            </function:description>
        <function:prototype>public list&lt;uint16> DNS_ADDITIONAL_CLASSES()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns a list of the 'time to live' fields in the 'name server' resource records in the current message.

            </function:description>
        <function:prototype>public list&lt;uint32> DNS_ADDITIONAL_TTLS()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns a list of the 'data' fields in the 'name server' resource records in the current message.

            </function:description>
        <function:prototype>public list&lt;rstring> DNS_ADDITIONAL_DATA()</function:prototype>
      </function:function>

    </function:functions>
  </function:functionSet>

  <function:functionSet>
    <function:headerFileName></function:headerFileName>
    <function:cppNamespaceName>NetflowMessageParser_result_functions</function:cppNamespaceName>
    <function:functions>

      <function:function>
        <function:description>

This parser result function returns the Netflow version of the current message, either '5' or '9.

            </function:description>
        <function:prototype>public uint16 NETFLOW_VERSION()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the number of Netflow records in the current message,
including templates, options, and flows.

            </function:description>
        <function:prototype>public uint16 NETFLOW_COUNT()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the elapsed time from when the router started until the current message was sent,
in milliseconds.

            </function:description>
        <function:prototype>public uint32 NETFLOW_SYSTEM_UPTIME()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the time that the current message was sent, in seconds,
according to the router's clock, relative to the beginning of the Unix epoch 
(at midnight on the first of January in Greenwich, England).

            </function:description>
        <function:prototype>public uint32 NETFLOW_UNIX_SECONDS()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the fractional part of NETFLOW_UNIX_SECONDS(), in nanoseconds,
for Netflow version 5 messages only.

            </function:description>
        <function:prototype>public uint32 NETFLOW_UNIX_NANOSECONDS()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the sequence number assigned to the current message by the router.

            </function:description>
        <function:prototype>public uint32 NETFLOW_SEQUENCE_NUMBER()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the port identifier of the router.

            </function:description>
        <function:prototype>public uint32 NETFLOW_SOURCE_ID()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the value of the specified Netflow version 9 field in the current flow record, 
if present,
represented as an unsigned integer, or zero if not.

            </function:description>
        <function:prototype>public uint64 NETFLOW_FIELD_AS_INTEGER(int32)</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the value of the specified Netflow version 9 field in the current flow record, 
if present, 
represented as a string, or an empty string if not.

            </function:description>
        <function:prototype>public rstring NETFLOW_FIELD_AS_STRING(int32)</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the value of the specified Netflow version 9 field in the current flow record, 
if present, 
represented as list of unsigned bytes, or an empty list if not.

            </function:description>
        <function:prototype>public list&lt;uint8> NETFLOW_FIELD_AS_BYTE_LIST(int32)</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the number of bytes that entered the router for the current flow record, 
if available, or zero if not.
For Netflow version 5, this is the `dOctets` field.
For Netflow version 9, this is field 1.

            </function:description>
        <function:prototype>public uint64 NETFLOW_IN_BYTES()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the number of packets that entered the router for the current flow record, 
if available, or zero if not.
For Netflow version 5, this is the `dPkts` field.
For Netflow version 9, this is field 2.

            </function:description>
        <function:prototype>public uint64 NETFLOW_IN_PKTS()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the number of flows that were aggregated for the current flow record,
if available, or zero if not.
For Netflow version 9, this is field 3.

            </function:description>
        <function:prototype>public uint64 NETFLOW_FLOWS()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the IP protocol number for the current flow record, 
if available,
for example, '17' for UDP, or '6' for TCP, or zero if not.
For Netflow version 5, this is the `prot` field.
For Netflow version 9, this is field 4.

            </function:description>
        <function:prototype>public uint8 NETFLOW_PROTOCOL()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the IP 'type of service' byte for the current flow record on entering the router,
if available, or zero if not.
For Netflow version 5, this is the `tos` field.
For Netflow version 9, this is field 5.

            </function:description>
        <function:prototype>public uint8 NETFLOW_SRC_TOS()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the cumulative value of all TCP flags in the current flow record, 
that is, the logical 'or' of the TCP flags in all packets in the flow,
if available, or zero if not.
For Netflow version 5, this is the `tcp_flags` field.
For Netflow version 9, this is field 6.

            </function:description>
        <function:prototype>public uint8 NETFLOW_TCP_FLAGS()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the TCP or UDP port number of the source endpoint of the current flow record,
if available, or zero if not.
For Netflow version 5, this is the `srcport` field.
For Netflow version 9, this is field 7.

            </function:description>
        <function:prototype>public uint16 NETFLOW_SRC_PORT()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the IP version 4 address of the source endpoint of the current flow record,
if available, or zero if not.
For Netflow version 5, this is the `srcaddr` field.
For Netflow version 9, this is field 8.

            </function:description>
        <function:prototype>public uint32 NETFLOW_IPV4_SRC_ADDR()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the number of significant bits in the 
IP version 4 address of the source endpoint of the current flow record,
if available, or zero if not.
For Netflow version 5, this is the `src_mask` field.
For Netflow version 9, this is field 9.

            </function:description>
        <function:prototype>public uint8 NETFLOW_SRC_MASK()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the interface index where the current flow entered the router,
if available, or zero if not.
For Netflow version 5, this is the `input` field.
For Netflow version 9, this is field 10.

            </function:description>
        <function:prototype>public uint32 NETFLOW_INPUT_INTERFACE()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the TCP or UDP port number of the destination endpoint of the current flow record,
if available, or zero if not.
For Netflow version 5, this is the `dstport` field.
For Netflow version 9, this is field 11.

            </function:description>
        <function:prototype>public uint16 NETFLOW_DST_PORT()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the IP version 4 address of the destination endpoint of the current flow record,
if available, or zero if not.
For Netflow version 5, this is the `dstaddr` field.
For Netflow version 9, this is field 12.

            </function:description>
        <function:prototype>public uint32 NETFLOW_IPV4_DST_ADDR()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the number of significant bits in the 
IP version 4 address of the destination endpoint of the current flow record,
if available, or zero if not.
For Netflow version 5, this is the `dst_mask` field.
For Netflow version 9, this is field 13.

            </function:description>
        <function:prototype>public uint8 NETFLOW_DST_MASK()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the interface index where the current flow left the router,
if available, or zero if not.
For Netflow version 5, this is the `output` field.
For Netflow version 9, this is field 14.

            </function:description>
        <function:prototype>public uint32 NETFLOW_OUTPUT_INTERFACE()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the IP version 4 address of the next router towards the destination endpoint of the current flow.
For Netflow version 5, this is the `nexthop` field.
For Netflow version 9, this is field 15.

            </function:description>
        <function:prototype>public uint32 NETFLOW_IPV4_NEXT_HOP()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the BGP autonomous system number of the source endpoint of the current flow.
For Netflow version 5, this is the `src_as` field.
For Netflow version 9, this is field 16. 

            </function:description>
        <function:prototype>public uint32 NETFLOW_SRC_AS()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the BGP autonomous system number of the destination endpoint of the current flow.
For Netflow version 5, this is the `dst_as` field.
For Netflow version 9, this is field 17. 

            </function:description>
        <function:prototype>public uint32 NETFLOW_DST_AS()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the IP version 4 address of the next router in the BGP domain.
For Netflow version 9, this is field 18. 

            </function:description>
        <function:prototype>public uint32 NETFLOW_BGP_IPV4_NEXT_HOP()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the number of outgoing multicast packets in the current flow.
For Netflow version 9, this is field 19.

            </function:description>
        <function:prototype>public uint64 NETFLOW_MUL_DST_PKTS()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the number of outgoing multicast bytes in the current flow.
For Netflow version 9, this is field 20.

            </function:description>
        <function:prototype>public uint64 NETFLOW_MUL_DST_BYTES()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the value of NETFLOW_SYSTEM_UPTIME() for the last packet of the current flow,
that is,
the time that the last packet in this flow
passed through the router, relative to when the router was booted, in milliseconds.
For Netflow version 5, this is the `last` field.
For Netflow version 9, this is field 21.

            </function:description>
        <function:prototype>public uint32 NETFLOW_LAST_SWITCHED()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the value of NETFLOW_SYSTEM_UPTIME() for the first packet of the current flow,
that is,
the time that the first packet in this flow
passed through the router, relative to when the router was booted, in milliseconds.
For Netflow version 5, this is the `first` field.
For Netflow version 9, this is field 22.

            </function:description>
        <function:prototype>public uint32 NETFLOW_FIRST_SWITCHED()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the number of bytes that left the router for the current flow.
For Netflow version 9, this is field 23.

            </function:description>
        <function:prototype>public uint64 NETFLOW_OUT_BYTES()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the number of packets that left the router for the current flow.
For Netflow version 9, this is field 24.

            </function:description>
        <function:prototype>public uint64 NETFLOW_OUT_PKTS()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the minimum packet length for the current flow.
For Netflow version 9, this is field 25.

            </function:description>
        <function:prototype>public uint16 NETFLOW_MIN_PKT_LNGTH()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the maximum packet length for the current flow.
For Netflow version 9, this is field 26.

            </function:description>
        <function:prototype>public uint16 NETFLOW_MAX_PKT_LNGTH()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the IP version 6 address of the source endpoint of the current flow record,
if available, or an empty list if not.
For Netflow version 9, this is field 27.

            </function:description>
        <function:prototype>public list&lt;uint8>[16] NETFLOW_IPV6_SRC_ADDR()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the IP version 6 address of the destination endpoint of the current flow record,
if available, or an empty list if not.
For Netflow version 9, this is field 28.

            </function:description>
        <function:prototype>public list&lt;uint8>[16] NETFLOW_IPV6_DST_ADDR()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the number of significant bits in the 
IP version 6 address of the source endpoint of the current flow record,
if available, or zero if not.
For Netflow version 9, this is field 29.

            </function:description>
        <function:prototype>public uint8 NETFLOW_IPV6_SRC_MASK()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the number of significant bits in the 
IP version 6 address of the source endpoint of the current flow record,
if available, or zero if not.
For Netflow version 9, this is field 30.

            </function:description>
        <function:prototype>public uint8 NETFLOW_IPV6_DST_MASK()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the IP version 6 flow label.
For Netflow version 9, this is field 31.

            </function:description>
        <function:prototype>public uint32 NETFLOW_IPV6_FLOW_LABEL()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the ICMP packet type.
For Netflow version 9, this is field 32.

            </function:description>
        <function:prototype>public uint16 NETFLOW_ICMP_TYPE()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the IGMP packet type.
For Netflow version 9, this is field 33.

            </function:description>
        <function:prototype>public uint8 NETFLOW_MUL_IGMP_TYPE()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the sampling rate, when Netflow is sampled,
for example, a value of 100 indicates that one of every 100 packets is sampled.
For Netflow version 9, this is field 34. 

            </function:description>
        <function:prototype>public uint32 NETFLOW_SAMPLING_INTERVAL()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the sampling algorithm, when Netflow is sampled, with 
'1' for deterministic sampling, and '2' for random sampling. 
For Netflow version 9, this is field 35.

            </function:description>
        <function:prototype>public uint8 NETFLOW_SAMPLING_ALGORITHM()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the timeout value, in seconds, for active flow entries in the Netflow cache. 
For Netflow version 9, this is field 36.

            </function:description>
        <function:prototype>public uint16 NETFLOW_FLOW_ACTIVE_TIMEOUT()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the timeout value, in seconds, for inactive flow entries in the Netflow cache. 
For Netflow version 9, this is field 37.

            </function:description>
        <function:prototype>public uint16 NETFLOW_FLOW_INACTIVE_TIMEOUT()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the type code of the switching engine in the router.
For Netflow version 9, this is field 38.

            </function:description>
        <function:prototype>public uint8 NETFLOW_ENGINE_TYPE()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the identifier of the switching engine in the router.
For Netflow version 9, this is field 39.

            </function:description>
        <function:prototype>public uint8 NETFLOW_ENGINE_ID()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the number of bytes exported by the Observation Domain. 
For Netflow version 9, this is field 40.

            </function:description>
        <function:prototype>public uint64 NETFLOW_TOTAL_BYTES_EXP()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the number of packets exported by the Observation Domain. 
For Netflow version 9, this is field 41.

            </function:description>
        <function:prototype>public uint64 NETFLOW_TOTAL_PKTS_EXP()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the number of flows exported by the Observation Domain. 
For Netflow version 9, this is field 42.

            </function:description>
        <function:prototype>public uint64 NETFLOW_TOTAL_FLOWS_EXP()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the IP version 4 source address prefix (specific for Cisco Catalyst architecture). 
For Netflow version 9, this is field 44.

            </function:description>
        <function:prototype>public uint32 NETFLOW_IPV4_SRC_PREFIX()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the IP version 4 destination address prefix (specific for Cisco Catalyst architecture). 
For Netflow version 9, this is field 45.

            </function:description>
        <function:prototype>public uint32 NETFLOW_IPV4_DST_PREFIX()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the MPLS top label type, '0' for  UNKNOWN, '1' for TE-MIDPT, '2' for ATOM, '3' for VPN '4' for BGP, '5' for LDP. 
For Netflow version 9, this is field 46.

            </function:description>
        <function:prototype>public uint8 NETFLOW_MPLS_TOP_LABEL_TYPE()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the Forwarding Equivalent Class corresponding to the MPLS Top Label. 
For Netflow version 9, this is field 47.

            </function:description>
        <function:prototype>public uint32 NETFLOW_MPLS_TOP_LABEL_IPV4_ADDR()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the identifier shown in "show flow-sampler". 
For Netflow version 9, this is field 48.

            </function:description>
        <function:prototype>public uint8 NETFLOW_FLOW_SAMPLER_ID()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the sampling mode, when Netflow is sampled,
For Netflow version 9, this is field 49.

            </function:description>
        <function:prototype>public uint8 NETFLOW_FLOW_SAMPLER_MODE()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the packet sampling interval, when Netflow is sampled.
For Netflow version 9, this is field 50.

            </function:description>
        <function:prototype>public uint32 NETFLOW_FLOW_SAMPLER_RANDOM_INTERVAL()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the minimum 'time to live' for incoming packets of the flow. 
For Netflow version 9, this is field 52.

            </function:description>
        <function:prototype>public uint8 NETFLOW_MIN_TTL()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the maximum 'time to live' for incoming packets of the flow. 
For Netflow version 9, this is field 53.

            </function:description>
        <function:prototype>public uint8 NETFLOW_MAX_TTL()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns The IP version 4 identification field of the flow. 
For Netflow version 9, this is field 54.

            </function:description>
        <function:prototype>public uint16 NETFLOW_IPV4_IDENT()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the 'type of service' byte setting for the flow when exiting the outgoing interface. 
For Netflow version 9, this is field 55.

            </function:description>
        <function:prototype>public uint8 NETFLOW_DST_TOS()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the incoming source MAC address for the flow. 
For Netflow version 9, this is field 56.

            </function:description>
        <function:prototype>public list&lt;uint8>[6] NETFLOW_MAC_SRC_ADDR_IN()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the incoming destination MAC address for the flow. 
For Netflow version 9, this is field 56.

            </function:description>
        <function:prototype>public list&lt;uint8>[6] NETFLOW_MAC_DST_ADDR_OUT()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the virtual LAN identifier associated with the ingress interface. 
For Netflow version 9, this is field 58.

            </function:description>
        <function:prototype>public uint16 NETFLOW_SRC_VLAN()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the virtual LAN identifier associated with the egress interface. 
For Netflow version 9, this is field 59.

            </function:description>
        <function:prototype>public uint16 NETFLOW_DST_VLAN()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the IP version for the flow, either '4' or '6'.
For Netflow version 9, this is field 60.

            </function:description>
        <function:prototype>public uint8 NETFLOW_IP_PROTOCOL_VERSION()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the direction of the flow,
'0' for ingress, '1' for egress. 
For Netflow version 9, this is field 61.

            </function:description>
        <function:prototype>public uint8 NETFLOW_DIRECTION()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the IP version 6 address of the next-hop router. 
For Netflow version 9, this is field 62.

            </function:description>
        <function:prototype>public list&lt;uint8>[16] NETFLOW_IPV6_NEXT_HOP()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the next router in the BGP domain. 
For Netflow version 9, this is field 63.

            </function:description>
        <function:prototype>public list&lt;uint8>[16] NETFLOW_BPG_IPV6_NEXT_HOP()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the IP version 6 option headers found in the flow. 
For Netflow version 9, this is field 64.

            </function:description>
        <function:prototype>public uint32 NETFLOW_IPV6_OPTION_HEADERS()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the MPLS label at the specified position in the stack,
where the position is specified with an argument between 1 and 10.
This comprises 20 bits of MPLS label, 3 experimental bits and 1 end-of-stack bit.
For Netflow version 9, these are fields 71 through 79.

            </function:description>
        <function:prototype>public list&lt;uint8> NETFLOW_MPLS_LABEL(int32)</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the incoming destination MAC address. 
For Netflow version 9, this is field 80.

            </function:description>
        <function:prototype>public list&lt;uint8>[6] NETFLOW_MAC_DST_ADDR_IN()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the outgoing source MAC address. 
For Netflow version 9, this is field 81.

            </function:description>
        <function:prototype>public list&lt;uint8>[6] NETFLOW_MAC_SRC_ADDR_OUT()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the router's interface name. 
For Netflow version 9, this is field 82. 

            </function:description>
        <function:prototype>public rstring NETFLOW_IF_NAME()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the router's interface description. 
For Netflow version 9, this is field 83. 

            </function:description>
        <function:prototype>public rstring NETFLOW_IF_DESC()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the name of the flow sampler, when Netflow is sampled.
For Netflow version 9, this is field 84.

            </function:description>
        <function:prototype>public rstring NETFLOW_SAMPLER_NAME()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the running byte counter for a permanent flow. 
For Netflow version 9, this is field 85.

            </function:description>
        <function:prototype>public uint64 NETFLOW_IN_PERMANENT_BYTES()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the running packet counter for a permanent flow. 
For Netflow version 9, this is field 86.

            </function:description>
        <function:prototype>public uint64 NETFLOW_IN_PERMANENT_PKTS()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the fragment offset value from fragmented IP packets. 
For Netflow version 9, this is field 88.

            </function:description>
        <function:prototype>public uint16 NETFLOW_FRAGMENT_OFFSET()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the forwarding status, with the 2 left bits giving the status and the 6 remaining bits giving the reason code.
For Netflow version 9, this is field 89.

            </function:description>
        <function:prototype>public uint8 NETFLOW_FORWARDING_STATUS()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the MPLS PAL Route Distinguisher. 
For Netflow version 9, this is field 90.

            </function:description>
        <function:prototype>public list&lt;uint8> NETFLOW_MPLS_PAL_RD()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the number of consecutive bits in the MPLS prefix length.
For Netflow version 9, this is field 91.

            </function:description>
        <function:prototype>public uint8 NETFLOW_MPLS_PREFIX_LEN()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns BGP policy accounting source traffic index. 
For Netflow version 9, this is field 92.

            </function:description>
        <function:prototype>public uint32 NETFLOW_SRC_TRAFFIC_INDEX()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns BGP policy accounting destination traffic index. 
For Netflow version 9, this is field 93.

            </function:description>
        <function:prototype>public uint32 NETFLOW_DST_TRAFFIC_INDEX()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the application description.
For Netflow version 9, this is field 94.

            </function:description>
        <function:prototype>public rstring NETFLOW_APPLICATION_DESCRIPTION()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns 8 bits of engine ID, followed by *n* bits of classification.
For Netflow version 9, this is field 95.

            </function:description>
        <function:prototype>public list&lt;uint8> NETFLOW_APPLICATION_TAG()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the name associated with a classification.
For Netflow version 9, this is field 96.

            </function:description>
        <function:prototype>public rstring NETFLOW_APPLICATION_NAME()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the value of a Differentiated Services Code Point (DSCP) encoded in the Differentiated Services Field, after modification.
For Netflow version 9, this is field 98.

            </function:description>
        <function:prototype>public uint8 NETFLOW_POST_IP_DSCP()</function:prototype>
      </function:function>

      <function:function>
        <function:description>

This parser result function returns the multicast replication factor.
For Netflow version 9, this is field 99.

            </function:description>
        <function:prototype>public uint32 NETFLOW_REPLICATION_FACTOR()</function:prototype>
      </function:function>

    </function:functions>
  </function:functionSet>

</function:functionModel>
