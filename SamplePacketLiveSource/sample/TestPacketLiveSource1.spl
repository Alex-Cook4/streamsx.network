/*
** Copyright (C) 2011, 2015  International Business Machines Corporation
** All Rights Reserved
*/

namespace sample;

use com.ibm.streamsx.network.source::*;

composite TestPacketLiveSource1 {
	
	
	type 
	
	/**This type defines the tuples emitted by the PacketLiveSource operator on port 0 below.*/
	PacketType =
		float64 captureTime,		// time that packet was captured, in seconds since Unix epoch 
		int64 packetNumber, // sequence number of packet, as emitted by operator
	  uint32 sessionKey, // source and destination address and port numbers
		uint32 rawLength, 			// original length of packet (not necessarily all captured)
		blob rawPacket ;			// contents of packet captured, including network headers (not necessarily complete)

	/**This type defines the tuples emitted by the PacketLiveSource operator on port 1 below.*/
	StatisticsType =
		float64 statisticsTime,		// time that statistics were produced, in seconds
		int64 packetsReceived, 			// number of packets received in this interval
		int64 packetsDropped, 			// number of packets dropped by operating system in this interval
		int64 packetsDroppedByInterface, // number of packets dropped by network interface adapter in this interval
		int64 packetsProduced, 	// number of packets emitted by operator in this interval
		int64 octetsProduced ; 	// number of btes emitted by operator in this interval

	/**This type defines the tuples emitted by the PacketHeaderParser operator below.*/
	HeaderType =
		float64 captureTime,		// time that packet was captured, in seconds since Unix epoch 
		uint32 ipProtocol,
   		rstring ipSrcAddressString,
   		rstring ipDstAddressString,
   		uint16 ipSrcPort,
   		uint16 ipDstPort,
   		uint32 udpDstPort,
 		blob rawPacket ;			// contents of packet, including all headers
	
	
	
	graph
	
	  ( stream<PacketType> PacketStream ; stream<StatisticsType> StatisticsStream ) = PacketLiveSource() {
	    param
	      networkInterface: "eth3";
	      promiscuous: true;
		  bufferSize: 10000000u;
		  processorAffinity: 1u;	
	      //filterExpression: "tcp port 80";  
	      statisticsInterval: 1.0;
	    output 
	    PacketStream:
	      captureTime = timestampp(),
			  packetNumber = packetNumber(),
			  sessionKey = sessionKey(),
	      rawLength = length(),
	      rawPacket = packet(); 
	    StatisticsStream:
	      statisticsTime = timestampp(),
	      packetsReceived = packetsReceived(), 		// number of packets received by libpcap in this interval
	      packetsDropped = packetsDropped(), 		// number of packets dropped by operating system in this interval
	      packetsDroppedByInterface = packetsDroppedByInterface(), 	// number of packets dropped by network interface adapter in this interval
	      packetsProduced = packetsProduced(), 	// number of packets emitted by operator in this interval
	      octetsProduced = octetsProduced(); 	// number of bytes emitted by operator in this interval
	    
	    config placement: 
	    partitionColocation("PrivilegedPE"); }


	() as PacketSink = FileSink(PacketStream) { 
		param 
			file: "debug.TestPacketLiveSource1.PacketStream.out"; format: txt; flush: 1u; hasDelayField: true;  
		config placement: 
			partitionColocation("PrivilegedPE"); }	


	() as StatisticsSink = FileSink(StatisticsStream) { 
	  logic onTuple StatisticsStream: {
	    if (packetsDropped+packetsDroppedByInterface>0l) log(Sys.info, (rstring)(packetsDropped+packetsDroppedByInterface) + " packets dropped");
	  }
		param 
			file: "debug.TestPacketLiveSource1.StatisticsStream.out"; format: txt; flush: 1u; hasDelayField: true;  
   		config placement: 
   			partitionColocation("UnprivilegedPE"); }	



	stream<HeaderType> HeaderStream as Out = PacketHeaderParser(PacketStream) {
		param
			packetAttribute: rawPacket;
		output Out: 
			ipProtocol = IP_PROTOCOL(),
   			ipSrcAddressString = IP_SRC_ADDRESS_STRING(),
   			ipDstAddressString = IP_DST_ADDRESS_STRING(),
   			ipSrcPort = IP_SRC_PORT(),
   			ipDstPort = IP_DST_PORT(),
   			udpDstPort = UDP_DST_PORT() ; 
   		config placement: 
   			partitionColocation("UnprivilegedPE"); } 
	() as HeaderSink = FileSink(HeaderStream) { 
		param 
			file: "debug.TestPacketLiveSource1.HeaderStream.out"; format: txt; flush: 1u; hasDelayField: true;  
   		config placement: 
   			partitionColocation("UnprivilegedPE"); }	



	stream<HeaderType> TCPStream = Filter(HeaderStream) {
		param
			filter: ipProtocol==6u;  
   		config placement: 
   			partitionColocation("UnprivilegedPE"); }
	() as TCPSink = FileSink(TCPStream) { 
		param 
			file: "debug.TestPacketLiveSource1.TCPStream.out"; format: txt; flush: 1u; hasDelayField: true;  
   		config placement: 
   			partitionColocation("UnprivilegedPE"); }	
	


	stream<HeaderType> UDPStream = Filter(HeaderStream) {
		param
			filter: ipProtocol==17u; 
   		config placement: 
   			partitionColocation("UnprivilegedPE"); }
	() as UDPSink = FileSink(UDPStream) { 
		param 
			file: "debug.TestPacketLiveSource1.UDPStream.out"; format: txt; flush: 1u; hasDelayField: true;  
   		config placement: 
   			partitionColocation("UnprivilegedPE"); }	



	stream<HeaderType> NetflowStream = Filter(HeaderStream) {
		param
			filter: udpDstPort==2055u; 
   		config placement: 
   			partitionColocation("UnprivilegedPE"); }
	() as NetflowSink = FileSink(NetflowStream) { 
		param 
			file: "debug.TestPacketLiveSource1.NetflowStream.out"; format: txt; flush: 1u; hasDelayField: true;  
   		config placement: 
   			partitionColocation("UnprivilegedPE"); }	


}


